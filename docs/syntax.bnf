<qid> ::= [<uid>'.']+<uid>

<switch> ::= 'on'
           | 'off'

<assoc> ::= 'left'
          | 'right'



<id> ::= <qid>
       | <uid>

<term_id> ::= <id>
            | '@'<id>

<patt> ::= '$'<uid>

<arg_id> ::= <uid>
           | '_'

<arg_ids> ::= <arg_id>
            | '(' <arg_id>+ ':' <term> ')'
            | '{' <arg_id>+ [':' <term>] '}'

<rw_patt> ::= <term>
            | 'in' <term>
            | 'in' <uid> 'in' <term>
            | <term> 'in' <term> ['in' <term>]
            | <term> 'as' <uid> 'in' <term>

<tactic> ::= <query>
           | 'apply' <term>
           | 'assume' <arg_id>+
           | 'fail'
           | 'focus' <int>
           | 'refine' <term>
           | 'reflexivity'
           | 'rewrite' [<assoc>] ['[' <rw_patt> ']'] <term>
           | 'simpl'
           | 'solve'
           | 'symmetry'
           | 'why3' ["<string>"]

<modifier> ::= 'constant'
             | 'injective'
             | 'opaque'
             | 'private'
             | 'protected'
             | 'sequential'

<float_or_int> ::= <float>
                 | <int>

<config> ::= 'builtin' "<string>" '≔' <id>
           | 'infix' [<assoc>] <float_or_int> "<string>" '≔' <id>
           | 'prefix' <float_or_int> "<string>" '≔' <id>
           | 'quantifier' <id>
           | 'unif_rule' <unif_rule>

<assert_kw> ::= 'assert'
              | 'assertnot'

<query> ::= <assert_kw> <arg_ids>* '⊢' <term> ':' <term>
          | <assert_kw> <arg_ids>* '⊢' <term> '≡' <term>
          | 'compute' <term>
          | 'print' [<id>]
          | 'proofterm'
          | 'set' 'debug' ('+' | '-')<string>
          | 'set' 'flag' "<string>" <switch>
          | 'set' 'prover' "<string>"
          | 'set' 'prover_timeout' <int>
          | 'set' 'verbose' <int>
          | 'type' <term>

<proof_end> ::= 'abort'
              | 'admit'
              | 'end'

<proof> ::= 'begin' (<tactic> ';')* <proof_end>

<constructor> ::= <uid> <arg_ids>* ':' <term>

<inductive> ::= <uid> <arg_ids>* ':' <term> '≔' ['|'] [<constructor>
                ('|' <constructor>)*]

<term_proof> ::= <term>
               | <proof>
               | <term> <proof>

<mod_path> ::= <qid>

<command> ::= 'require' 'open' <mod_path>* ';'
            | 'require' <mod_path>* ';'
            | 'require' <mod_path> 'as' <uid> ';'
            | 'open' <mod_path>* ';'
            | <modifier>* 'symbol' <uid> <arg_ids>* ':' <term> [<proof>]
              ';'
            | <modifier>* 'symbol' <uid> <arg_ids>* [':' <term>] '≔'
              <term_proof> ';'
            | <modifier>* <arg_ids>* 'inductive' <inductive> ('with'
              <inductive>)* ';'
            | 'rule' <rule> ('with' <rule>)* ';'
            | 'set' <config> ';'
            | <query> ';'
            

<env> ::= '[' [<term> (';' <term>)*] ']'

<aterm> ::= <term_id>
          | '_'
          | 'TYPE'
          | '?'<uid> [<env>]
          | <patt> [<env>]
          | '(' <term> ')'
          | '{' <term> '}'
          | <int>

<sterm> ::= <aterm>+

<term> ::= <sterm>
         | <term> → <term>
         | '`' <term_id> <binder>
         | 'Π' <binder>
         | 'λ' <binder>
         | 'let' <uid> <arg_ids>* [':' <term>] '≔' <term> 'in' <term>

<binder> ::= <arg_ids>+ ',' <term>
           | <arg_id> ':' <term> ',' <term>

<rule> ::= <term> '↪' <term>

<equation> ::= <term> '≡' <term>

<unif_rule> ::= <equation> '↪' '[' <equation> (';'
                <equation>)* ']'


