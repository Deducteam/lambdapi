reserved "_"
reserved "abort"
reserved "admit"
reserved "apply"
reserved "as"
reserved "assert"
reserved "assertnot"
reserved "assume"
reserved "begin"
reserved "compute"
reserved "constant"
reserved "end"
reserved "fail"
reserved "focus"
reserved "in"
reserved "injective"
reserved "let"
reserved "opaque"
reserved "open"
reserved "print"
reserved "private"
reserved "proofterm"
reserved "protected"
reserved "refine"
reserved "reflexivity"
reserved "require"
reserved "rewrite"
reserved "rule"
reserved "set"
reserved "simpl"
reserved "symmetry"
reserved "symbol"
reserved "type"
reserved "TYPE"
reserved "with"
reserved "why3"

// Identifiers declared with the command "set declared"
<declared_id> ::= "ℕ" | "α" | ...

// Identifiers
<ident> ::=
  | RE("[a-zA-Z_][a-zA-Z0-9_]*")     // Regular identifier
  | RE("{|\([^|]\|\(|[^}]\)\)*|*|}") // Escaped identifier
  | <declared_id>                    // Declared identifier

// Natural number literals
<nat_lit> ::= RE("[0-9]+")

// Float literals
<float_lit> ::= RE("[0-9]+\([.][0-9]+\)?")

// String literals
<string_lit> ::= RE("\"[^\"\n]*\"")

// Module paths
<path> ::= {<ident> "."}* <ident>

// Qualified identifiers
<qident> ::= {<ident> "."}* <ident>

// Infix operators declared with the command "set infix"
<infix_op> ::= "+" | "×" | ...

// Terms
<term> ::=
  | "TYPE"
  | "@"? <qident>
  | "_"
  | "?" - <ident> {"[" <term> {";" <term>}* "]"}?
  | "(" <term> ")"
  | "{" <term> "}"
  | <term> <term>
  | <type> "→" <type>
  | "Π" <arg>+ "," <type>
  | "λ" <arg>+ "," <term>
  | "let" <ident> <arg>* {":" <term>}? "≔" <term> "in" <term>
  | <nat_lit>
  | <term> <infix_op> <term>

// Arguments (of abstraction, product, ...) maybe marked as implicit
<arg> ::=
  | <ident>
  | "{" <ident>+ {":" <type>}? "}"
  | "(" <ident>+ ":" <type> ")"

// Types
<type> ::= <term>

// Rewrite patterns for rewriting rule left hand-sides
<patt> ::=
  | "$" - {<ident> | "_"} {"[" <ident> {";" <ident>}* "]"}?
  | "λ" <arg>+ "," <patt>
  | <qident> {<patt>}*

// Rewriting rules
<rule> ::= <qident> {<patt>}* "↪" <term>

// Assertion predicates
<assertion> ::=
  | <arg>* "⊢" <term> ":" <term>
  | <arg>* "⊢" <term> "≡" <term>

// Flag names
<flag_name> ::=
  | "eta_equality"
  | "print_domains"
  | "print_implicits"
  | "print_meta_type"
  | "print_contexts"
  | "print_domains"

// Flag values
<flag_value> ::=
  | "on"
  | "off"

// Queries
<query> ::=
  | "print" <ident>?
  | "proofterm"
  | "type" <term>
  | "compute" <term>
  | "set" "verbose" RE("[1-9][0-9]*")
  | "set" "debug" RE("[-+][a-zA-Z]+")
  | "set" "flag" \"<flag_name>\" <flag_value>
  | "set" "prover" <ident>
  | "set" "prover_timeout" <nat_lit>
  | "assert" <assertion>
  | "assertnot" <assertion>

// Patterns for the rewrite tactic
<rw_patt> ::=
  | <term>
  | "in" <term>
  | "in" <ident> "in" <term>
  | <ident> "in" <term>
  | <term> "in" <ident> "in" <term>
  | <term> "as" <ident> "in" <term>
  
// Proof tactics
<tactic> ::=
  | <query>
  | "refine" <term>
  | "assume" <ident>+
  | "apply" <term>
  | "simpl"
  | "rewrite" "-"? {"[" <rw_patt> "]"}? <term>
  | "reflexivity"
  | "symmetry"
  | "focus" <nat_lit>
  | "why3" <string_lit>?
  | "fail"

// Builtins
<builtin> ::=
  | "0"
  | "+1"
  | "T"
  | "P"
  | "eq"
  | "refl"
  | "eq_ind"
  | "top"
  | "bot"
  | "not"
  | "or"
  | "and"
  | "imp"

// Inductive types
<inductive> ::= <ident> ":" <term> "≔" {"|" <ident> ":" <term>}*

// Proofs
<proof> ::= "begin" <tactic>* {"end"|"admit"|"abort"}

// Unification rules
<unif_rule> ::= <patt> "≡" <patt> "↪" <term> "≡" <term> {";" <term> "≡" <term>}*

// Modifiers
<property> ::= "constant" | "injective"
<exposition> ::= "protected" | "private"
<opacity> ::= "opaque"
<modifier> ::= <opacity> | <exposition> | <property>

// Commands
<command> ::=
  | <query>
  | "require" <path> "as" <ident>
  | "require" "open"? <path>
  | "open" <path>
  | <modifier>* "symbol" <ident> <arg>* {":" <type>}? {"≔" <term>}? proof?
  | <exposition>? "inductive" <inductive> {"with" <inductive>}*
  | "rule" <rule> {"with" <rule>}*
  | "set" "declared" <string_lit>
  | "set" "prefix" <float_lit> <string_lit> "≔" <qident>
  | "set" "infix" {"left" | "right"}? <float_lit> <string_lit> "≔" <qident>
  | "set" "quantifier" <qident>
  | "set" "builtin" \"<builtin>\" "≔" <qident>
  | "set" "unif_rule" <unif_rule>

// Entry point: list of commands
<main> ::= <command>*
