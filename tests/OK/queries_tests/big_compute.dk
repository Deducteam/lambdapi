Nat : Type.
Z   : Nat.
S   : Nat -> Nat.

def plus : Nat -> Nat -> Nat.
[x]   plus Z     x --> x.
[x,y] plus (S x) y --> plus x (S y).

def mult : Nat -> Nat -> Nat.
[]    mult Z     _ --> Z.
[x,y] mult (S x) y --> plus y (mult x y).

def fact : Nat -> Nat.
[]  fact Z     --> S Z.
[x] fact (S x) --> mult (S x) (fact x).

def six   : Nat.
[] six   --> (S (S (S (S (S (S Z)))))).

def seven : Nat.
[] seven --> (S (S (S (S (S (S (S Z))))))).

def eight : Nat.
[] eight --> (S (S (S (S (S (S (S (S Z)))))))).

def 0 : Nat := Z.
def 1 : Nat := S 0.
def 2 : Nat := S 1.
def 3 : Nat := S 2.
def 4 : Nat := S 3.
def 5 : Nat := S 4.
def 6 : Nat := S 5.
def 7 : Nat := S 6.

#EVAL 0.
#EVAL 1.
#EVAL 2.
#EVAL 3.
#EVAL 4.
#EVAL 5.
#EVAL 6.
#EVAL 7.

#EVAL (fact 0).
#EVAL (fact 1).
#EVAL (fact 2).
#EVAL (fact 3).

#EVAL (plus (fact 3) (fact 2)).
#EVAL (plus (fact 2) (fact 3)).

#ASSERT (plus (fact 5) (fact 4)) == (plus (fact 4) (fact 5)).
#ASSERT (plus (fact seven) (fact six)) == (plus (fact six) (fact seven)).
#ASSERT (plus (fact seven) (fact eight)) == (plus (fact eight) (fact seven)).
