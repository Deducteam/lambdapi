(; Computational test. ;)
Nat : Type.
Z : Nat.
S : Nat -> Nat.

def plus : Nat -> Nat -> Nat.
[x]        plus Z x --> x
[x,y] plus (S x) y --> plus x (S y).

def mult : Nat -> Nat -> Nat.
[]    mult Z _ --> Z
[x,y] mult (S x) y --> plus y (mult x y).

def fact : Nat -> Nat.
[]      fact Z --> S Z
[x] fact (S x) --> mult (S x) (fact x).

def one   : Nat := (S Z).
def two   : Nat := (S one).
def three : Nat := (S two).
def four  : Nat := (S three).
def five  : Nat := (S four).
def six   : Nat := (S five).
def seven : Nat := (S six).

#ASSERT plus (fact seven) (fact six) == plus (fact six) (fact seven).
