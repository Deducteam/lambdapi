Nat : Type.

z : Nat.
s : Nat -> Nat.

def m : Nat -> Nat -> Nat.
[i]   m i     z     --> i.
[j]   m z     j     --> j.
[i,j] m (s i) (s j) --> s (m i j).

(; Sorts ;)

Sort : Type.

prop : Sort.
type : Nat -> Sort.

(; Universe successors ;)
def succ : Sort -> Sort.
[]  succ prop     --> type z.
[i] succ (type i) --> type (s i).

(; Universe cumulativity ;)
def next : Sort -> Sort.
[]  next prop     --> type z.
[i] next (type i) --> type (s i).

(; Universe product rules ;)
def rule : Sort -> Sort -> Sort.
[]    rule _       prop     --> prop.
[s2]  rule prop     s2       --> s2.
[i,j] rule (type i) (type j) --> type (m i j).

def max : Sort -> Sort -> Sort.
[s1]  max s1       prop     --> s1.
[s2]  max prop     s2       --> s2.
[i,j] max (type i) (type j) --> type (m i j).

(; Types and terms ;)

Univ : s : Sort -> Type.
def Term : s : Sort -> a : Univ s -> Type.

univ : s : Sort -> Univ (succ s).
def lift : s1:Sort -> s2:Sort -> a:Univ s1 -> Univ (max s1 s2).
def prod : s1:Sort -> s2:Sort -> a:Univ s1 -> b:(Term s1 a -> Univ s2) -> Univ (rule s1 s2).

[s] Term _ (univ s) --> Univ s.
[s1,a]      Term _ (lift s1 _ a)    --> Term s1 a.
[s1,s2,a,b] Term _ (prod s1 s2 a b) --> x : Term s1 a -> Term s2 (b x).

(; Canonicity rules ;)

[s]        max s           s  --> s.
[s1,s2,s3] max (max s1 s2) s3 --> max s1 (max s2 s3).

[s1,s2,s3] rule (max s1 s3) s2          --> max (rule s1 s2) (rule s3 s2).
[s1,s2,s3] rule s1          (max s2 s3) --> max (rule s1 s2) (rule s1 s3).

[s,a]          lift s s  a              --> a.
[s1,s2,s3,a]   lift _ s3 (lift s1 s2 a) --> lift s1 (max s2 s3) a.

[s1,s2,s3,a,b]
  prod _ s2 (lift s1 s3 a) b -->
  lift (rule s1 s2) (rule s3 s2) (prod s1 s2 a b).

[s1,s2,s3,a,b]
  prod s1 _ a (x => lift s2 s3 (b x)) -->
  lift (rule s1 s2) (rule s1 s3) (prod s1 s2 a (x : Term s1 a => b x)).
