(; Type of booleans. ;)

B : Type.

true : B.
false : B.

(; Type of natural numbers. ;)

N : Type.

0 : N.
s : N -> N.

def 1 := s 0.

(; Addition on natural numbers. ;)

def add : N -> N -> N.

[x]   add 0 x --> x.
[x,y] add (s x) y --> s (add x y).

#EVAL (add (s 1) (s 1)).

(; Type code universes. ;)

U : N -> Type.

(; Decoding function. ;)

def T : i : N -> U i -> Type.

(; Prop is an abbreviation for the universe 0; ;)

def Prop := U 0.

def P := T 0.

(; Code for the type of booleans in the universe 1. ;)

bool : U 1.

[] T _ bool --> B.

(; Code for the type of natural numbers in the universe 1. ;)

nat : U 1.

[] T _ nat --> N.

(; Cumulativity: [lift i] maps [U i] to [U (s i)]. ;)

lift : i : N -> U i -> U (s i).

(; Code for the product type in universe i. ;)

pi : i : _ -> a : U i -> (T _ a -> U i) -> U i.

[i,a,f] T _ (pi i a f) --> x : T i a -> T i (f x).

(; Code for the type of vectors in universe i. ;)

vec : i : _ -> U i -> N -> U i.

nil : i : _ -> a : _ -> T _ (vec i a 0).
cons : i : _ -> a : _ -> T i a -> n : _ -> T _ (vec _ a n) -> T _ (vec _ a (s n)).

(; Induction principle on N. ;)

def nat_ind : p:(N -> Prop) -> P (p 0) -> (n : _ -> P (p n) -> P (p (s n))) -> n : _ -> P (p n).

[u]       nat_ind _  u _  0   --> u.
[p,u,v,n] nat_ind p u v (s n) --> v n (nat_ind p u v n).

(; Boolean equality on N. ;)

def beq : N->N->B.

[]    beq 0     0     --> true.
[x,y] beq (s x) (s y) --> beq x y.
[]    beq 0     (s _) --> false.
[]    beq (s _) 0     --> false.

(; Leibniz equality. ;)

eq : i : _ -> a : U i -> T _ a -> T _ a -> Prop.

refl : i : _ -> a : _ -> x : _ -> T _ (eq i a x x).
