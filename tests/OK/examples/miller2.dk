R : Type.
0 : R.
def p : R -> R -> R.
[x] p 0 x --> x.
[x] p x 0 --> x.

sh : R -> R.
ch : R -> R.
def d : (R -> R) -> (R -> R).
[] d sh --> ch.
[] d ch --> sh.
[] d (x => sh x) --> ch.
[] d (x => ch x) --> sh.

R2 : Type.
pair : R -> R -> R2.

def dx : (R -> R -> R) -> (R -> R -> R).
[F] dx (x => y => F x) --> x:R => y:R => (d (x:R => F x)) x.
[F] dx (x => y => F y) --> x:R => y:R => 0.

def dy : (R -> R -> R) -> (R -> R -> R).
[F] dy (x => y => F x) --> x:R => y:R => 0.
[F] dy (x => y => F y) --> x:R => y:R => (d (x:R => F x)) x.

def grad : (R -> R -> R) -> (R -> R -> R2).
[F] grad F --> x:R => y:R => pair ((dx F) x y) ((dy F) x y).

def plus : (R -> R -> R) -> (R -> R -> R) -> (R -> R -> R).
[F,G] plus F G --> (x:R => y:R => p (F x y) (G x y)).
[F,G] dx (x => y => p (F x y) (G x y)) -->
		 x:R => y:R => p ((dx (x:R => y:R => F x y)) x y)
				     ((dx (x:R => y:R => G x y)) x y).
[F,G] dy (x => y => p (F x y) (G x y)) -->
		 x:R => y:R => p ((dy (x:R => y:R => F x y)) x y)
				     ((dy (x:R => y:R => G x y)) x y).

def trans : (R -> R -> R) -> (R -> R -> R).
[F] trans F --> x:R => y:R => F y x.

def flip : (R -> R -> R2) -> (R -> R -> R2).
[F,G] flip (x => y => pair (F x y) (G x y)) --> x:R => y:R => pair (G x y) (F x y).


def f : R -> R -> R := plus (x : R => y : R => ch x) (x : R => y : R => sh y).


#EVAL flip (grad f).
#EVAL grad (trans f).

#ASSERT grad (trans f) == flip (grad f).
