(; Les Types ;)

Nat : Type.
Bool : Type.
Int : Type.
NatList : Type.
BoolVector : Nat -> Type.

(; Constructeurs ;)

0 : Nat.
S : Nat -> Nat.

def 1 := S 0.
def 2 := S 1.
def 3 := S 2.
def 4 := S 3.
def 5 := S 4.
def 6 := S 5.
def 7 := S 6.
def 8 := S 7.
def 9 := S 8.
def 10 := S 9.
def 11 := S 10.
def 12 := S 11.
def 13 := S 12.
def 14 := S 13.
def 15 := S 14.
def 16 := S 15.
def 17 := S 16.
def 18 := S 17.
def 19 := S 18.
def 20 := S 19.
def 21 := S 20.
def 22 := S 21.
def 23 := S 22.
def 24 := S 23.
def 25 := S 24.
def 26 := S 25.
def 27 := S 26.
def 28 := S 27.
def 29 := S 28.
def 30 := S 29.
def 31 := S 30.
def 32 := S 31.
def 33 := S 32.
def 34 := S 33.
def 35 := S 34.
def 36 := S 35.
def 37 := S 36.
def 38 := S 37.
def 39 := S 38.
def 40 := S 39.
def 41 := S 40.
def 42 := S 41.
def 43 := S 42.
def 44 := S 43.
def 45 := S 44.
def 46 := S 45.
def 47 := S 46.
def 48 := S 47.
def 49 := S 48.
def 50 := S 49.
def 51 := S 50.
def 52 := S 51.
def 53 := S 52.
def 54 := S 53.
def 55 := S 54.
def 56 := S 55.
def 57 := S 56.
def 58 := S 57.
def 59 := S 58.
def 60 := S 59.
def 61 := S 60.
def 62 := S 61.
def 63 := S 62.
def 64 := S 63.
def 65 := S 64.
def 66 := S 65.
def 67 := S 66.
def 68 := S 67.
def 69 := S 68.
def 70 := S 69.
def 71 := S 70.
def 72 := S 71.
def 73 := S 72.
def 74 := S 73.
def 75 := S 74.
def 76 := S 75.
def 77 := S 76.
def 78 := S 77.
def 79 := S 78.
def 80 := S 79.
def 81 := S 80.
def 82 := S 81.
def 83 := S 82.
def 84 := S 83.
def 85 := S 84.
def 86 := S 85.
def 87 := S 86.
def 88 := S 87.
def 89 := S 88.
def 90 := S 89.
def 91 := S 90.
def 92 := S 91.
def 93 := S 92.
def 94 := S 93.
def 95 := S 94.
def 96 := S 95.
def 97 := S 96.
def 98 := S 97.
def 99 := S 98.
def 100 := S 99.

True : Bool.
False : Bool.

def Diff : Nat -> Nat -> Int.
[m, n] Diff (S m) (S n) --> Diff m n.

Vide : NatList.
Cons : Nat -> NatList -> NatList.

vector_nil : BoolVector 0.
vector_cons : n : Nat -> Bool -> BoolVector n -> BoolVector (S n).

(; Plein de fonctions ;)

def pred : Nat -> Nat.
[n] pred (S n) --> n.

def plus : Nat -> Nat -> Nat.
[n] plus 0 n --> n
[m, n] plus (S m) n --> S (plus m n)
[n] plus n 0--> n
[m, n] plus m (S n) --> S (plus m n).

def plus_rec_term : Nat -> Nat -> Nat.
[n] plus_rec_term 0 n --> n
[m, n] plus_rec_term (S m) n --> plus_rec_term m (S n).

def mult : Nat -> Nat -> Nat.
[]     mult 0     _ --> 0
[m, n] mult (S m) n --> plus n (mult m n).

def not : Bool -> Bool.
[] not True --> False.
[] not False --> True.

def even : Nat -> Bool.
[] even 0 --> True.
[n] even (S n) --> not (even n).

def equal : Nat -> Nat -> Bool.
[] equal 0 0 --> True
[] equal (S _) 0 --> False
[] equal 0 (S _) --> False
[m,n] equal (S m) (S n) --> equal m n.

def leq : Nat -> Nat -> Bool.
[] leq 0 _ --> True
[m] leq (S m) 0 --> False
[m, n] leq (S m) (S n) --> leq m n.

def moitie : Nat -> Nat.
[] moitie 0 --> 0
[n] moitie (S (S n)) --> S (moitie n).

def double_add : Nat -> Nat.
[n] double_add n --> plus n n.

def double_mult : Nat -> Nat.
[n] double_mult n --> mult (S (S 0)) n.

def double_constr : Nat -> Nat.
[] double_constr 0 --> 0
[n] double_constr (S n) --> S (S (double_constr n)).

def boucle : Bool -> Bool.
[x] boucle x --> boucle (not x).

def Ackermann : Nat -> Nat -> Nat.
[n] Ackermann 0 n --> S n
[m] Ackermann (S m) 0 --> Ackermann m (S 0)
[m, n] Ackermann (S m) (S n) --> Ackermann m (Ackermann (S m) n).

def factorielle : Nat -> Nat.
[]  factorielle 0     --> S 0.
[n] factorielle (S n) --> mult (S n) (factorielle n).

def hd : NatList -> Nat.
[n] hd (Cons n _) --> n.

def tl : NatList -> NatList.
[l] tl (Cons _ l) --> l.

def append : NatList -> NatList -> NatList.
[l] append Vide l --> l
[n,l1,l2] append (Cons n l1) l2 --> Cons n (append l1 l2).

def length : NatList -> Nat.
[] length Vide --> 0
[l] length (Cons _ l) --> S (length l).

def abs : Int -> Nat.
[m] abs (Diff m 0) --> m
[n] abs (Diff 0 n) --> n.

def succ_int : Int -> Int.
[m] succ_int (Diff m 0) --> Diff (S m) 0
[n] succ_int (Diff 0 (S n)) --> Diff 0 n.

def pred_int : Int -> Int.
[n] pred_int (Diff 0 n) --> Diff 0 (S n)
[m] pred_int (Diff (S m) 0) --> Diff m 0.

def plus_int : Int -> Int -> Int.
[x] plus_int (Diff 0 0) x --> x
[m, n, x] plus_int (Diff (S m) n) x --> plus_int (Diff m n) (succ_int x)
[m, n, x] plus_int (Diff m (S n)) x --> plus_int (Diff m n) (pred_int x).

def moins_int : Int -> Int -> Int.
[x] moins_int x (Diff 0 0) --> x
[m, n, x] moins_int x (Diff (S m) n) --> moins_int (pred_int x) (Diff m n)
[m, n, x] moins_int x (Diff m (S n)) --> moins_int (succ_int x) (Diff m n).

def mult_int : Int -> Int -> Int.
[] mult_int (Diff 0 0) _ --> Diff 0 0
[m, n, x] mult_int (Diff (S m) n) x --> plus_int x (mult_int (Diff m n) x)
[m, n, x] mult_int (Diff m (S n)) x --> moins_int (mult_int (Diff m n) x) x.

def vector_head : n : Nat -> BoolVector (S n) -> Bool.
def vector_tail : n : Nat -> BoolVector (S n) -> BoolVector n.
[ n, a, l] vector_head n (vector_cons _ a l) --> a.
[ n, a, l] vector_tail n (vector_cons _ a l) --> l.

def vector_append : m : Nat -> n : Nat -> BoolVector m -> BoolVector n -> BoolVector (plus m n).
[v] vector_append 0 _ vector_nil v --> v
[v] vector_append _ 0 v vector_nil --> v
[m, n, x, v1, v2] vector_append _ n (vector_cons m x v1) v2 --> vector_cons (plus m n) x (vector_append m n v1 v2).

Istrue : Bool -> Type.
tt : Istrue True.

def test1 : Istrue (equal (mult 10 10) 100) := tt.

def equalBool : Bool -> Bool -> Bool.
[] equalBool True True --> True
[] equalBool True False --> False
[] equalBool False True --> False
[] equalBool False False --> True.

def and : Bool -> Bool -> Bool.
[] and False _ --> False
[] and _ False --> False
[] and True True --> True.

def vector_equal : n : Nat -> BoolVector n -> BoolVector n -> Bool.
[] vector_equal _ vector_nil vector_nil --> True
[n, a, b, v1, v2] vector_equal (S n) (vector_cons _ a v1) (vector_cons _ b v2) --> and (equalBool a b) (vector_equal n v1 v2).

def 0_right_neutral : n : Nat ->
                      Istrue (equal n (plus n 0)).
[] 0_right_neutral 0 --> tt
[n] 0_right_neutral (S n) --> 0_right_neutral n.

(; FIXME too slow
#ASSERT factorielle 14 == mult 95 95.
;)
