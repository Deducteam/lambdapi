Bool : Type.
Nat : Type.

True : Bool.
False : Bool.

0 : Nat.
S : Nat -> Nat.

def Bool_ : Nat -> Type.
[]  Bool_ 0     --> Bool.
[n] Bool_ (S n) --> Bool -> Bool_ n.

def and : Bool -> Bool -> Bool.
[]  and False _ --> False.
[x] and True  x --> x.

def and1_ : n : Nat -> Bool_ n.
[]      and1_ 0             --> True.
[x]     and1_ (S 0)     x   --> x.
[x,y,n] and1_ (S (S n)) x y --> and1_ (S n) (and x y).

(; Ici un and acceptant un nombre variable d'arguments qui type-check bien ;)
def and2_ : n : Nat -> Bool_ n.
[]  and2_ 0         --> True.
[]  and2_ (S 0)     --> x:Bool => x.
[n] and2_ (S (S n)) --> x:Bool => y:Bool => (and2_ (S n) (and x y)).

def e : n : Nat -> Bool_ n -> Bool_ n.
def andb : n:Nat -> Bool_ n.
[]      e 0 (andb 0            ) --> True.
[x]     e 0 (andb (S 0)     x  ) --> x.
[x,y,n] e n (andb (S (S _)) x y) --> andb (S n) (and x y).
(;[x,y,n] e n (andb _ x y) --> andb (S n) (and x y).;)
(;FIXME used to work.;)
