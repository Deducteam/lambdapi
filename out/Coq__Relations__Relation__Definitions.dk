(; This file was automatically generated by Coqine. ;)
(; The encoding used was: "template_cic". ;)

def relation :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  cupicef.Univ
    (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
       (cupicef.type (cupicef.s cupicef.z)))

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   cupicef.prod (cupicef.type (cupicef.s cupicef.z))
     (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
        (cupicef.type (cupicef.s cupicef.z)))
     (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
           (cupicef.type (cupicef.s cupicef.z))))
     cupicef.I A
     (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
      cupicef.prod (cupicef.type (cupicef.s cupicef.z))
        (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
           (cupicef.type (cupicef.s cupicef.z)))
        cupicef.I A
        (__0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
         cupicef.univ cupicef.prop (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)).

def reflexive :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  cupicef.Univ cupicef.prop

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   R :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   cupicef.prod (cupicef.type (cupicef.s cupicef.z)) cupicef.prop
     (cupicef.rule (cupicef.type (cupicef.s cupicef.z)) cupicef.prop)
     cupicef.I A
     (x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A => R x x).

def transitive :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  cupicef.Univ cupicef.prop

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   R :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   cupicef.prod (cupicef.type (cupicef.s cupicef.z))
     (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop))))
     (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule cupicef.prop
                 (cupicef.rule cupicef.prop cupicef.prop)))))
     cupicef.I A
     (x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
      cupicef.prod (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop)))
        (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule cupicef.prop
                 (cupicef.rule cupicef.prop cupicef.prop))))
        cupicef.I A
        (y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
         cupicef.prod (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop))
           (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule cupicef.prop
                 (cupicef.rule cupicef.prop cupicef.prop)))
           cupicef.I A
           (z : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
            cupicef.prod cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop)
              (cupicef.rule cupicef.prop
                 (cupicef.rule cupicef.prop cupicef.prop))
              cupicef.I (R x y)
              (__ : cupicef.Term cupicef.prop (R x y) =>
               cupicef.prod cupicef.prop cupicef.prop
                 (cupicef.rule cupicef.prop cupicef.prop) cupicef.I (
                 R y z) (__0 : cupicef.Term cupicef.prop (R y z) => R x z))))).

def symmetric :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  cupicef.Univ cupicef.prop

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   R :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   cupicef.prod (cupicef.type (cupicef.s cupicef.z))
     (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule cupicef.prop cupicef.prop))
     (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.prop cupicef.prop)))
     cupicef.I A
     (x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
      cupicef.prod (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule cupicef.prop cupicef.prop)
        (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.prop cupicef.prop))
        cupicef.I A
        (y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
         cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I (R x y)
           (__ : cupicef.Term cupicef.prop (R x y) => R y x))).

def antisymmetric :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  cupicef.Univ cupicef.prop

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   R :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   cupicef.prod (cupicef.type (cupicef.s cupicef.z))
     (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule cupicef.prop (cupicef.rule cupicef.prop cupicef.prop)))
     (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop))))
     cupicef.I A
     (x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
      cupicef.prod (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule cupicef.prop (cupicef.rule cupicef.prop cupicef.prop))
        (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop)))
        cupicef.I A
        (y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
         cupicef.prod cupicef.prop (cupicef.rule cupicef.prop cupicef.prop)
           (cupicef.rule cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop))
           cupicef.I (R x y)
           (__ : cupicef.Term cupicef.prop (R x y) =>
            cupicef.prod cupicef.prop cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop) cupicef.I (R y x)
              (__0 : cupicef.Term cupicef.prop (R y x) =>
               Coq__Init__Logic.eq
                 (cupicef.cast
                    (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                       cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I A)
                 x y)))).

def equiv :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  cupicef.Univ cupicef.prop

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   R :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   Coq__Init__Logic.and (reflexive A R)
     (Coq__Init__Logic.and (transitive A R) (symmetric A R)).

def preorder :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  cupicef.Univ cupicef.prop.

def Build__preorder :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  preord__refl0 : cupicef.Term cupicef.prop (reflexive A R) ->
  preord__trans0 : cupicef.Term cupicef.prop (transitive A R) ->
  cupicef.Term cupicef.prop (preorder A R).

[ ] cupicef.code_guarded? _ (Build__preorder _ _ _ _) --> cupicef.guarded.

def match____preorder :
  s : cupicef.Sort ->
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  P : (cupicef.Term cupicef.prop (preorder A R) -> cupicef.Univ s) ->
  case__Build__preorder :
    (preord__refl0 : cupicef.Term cupicef.prop (reflexive A R) ->
     preord__trans0 : cupicef.Term cupicef.prop (transitive A R) ->
     cupicef.Term s (P (Build__preorder A R preord__refl0 preord__trans0))) ->
  x : cupicef.Term cupicef.prop (preorder A R) ->
  cupicef.Term s (P x).

[ s, A, R, P, case__Build__preorder, preord__refl0, preord__trans0]
  match____preorder s A R P case__Build__preorder
    (Build__preorder A R preord__refl0 preord__trans0)
  -->
  case__Build__preorder preord__refl0 preord__trans0.

[ s, A, R, P, s']
  match____preorder s A R
    (x => cupicef.uncode _ (cupicef.code (cupicef.cU s') (P x)))
  -->
  match____preorder s' A R (x => P x).

def preord__refl :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  p : cupicef.Term cupicef.prop (preorder A R) ->
  cupicef.Term cupicef.prop (reflexive A R)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   R :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   p : cupicef.Term cupicef.prop (preorder A R) =>
   match____preorder cupicef.prop A R
     (p0 : cupicef.Term cupicef.prop (preorder A R) => reflexive A R)
     (preord__refl0 : cupicef.Term cupicef.prop (reflexive A R) =>
      preord__trans0 : cupicef.Term cupicef.prop (transitive A R) =>
      preord__refl0)
     p.

def preord__trans :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  p : cupicef.Term cupicef.prop (preorder A R) ->
  cupicef.Term cupicef.prop (transitive A R)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   R :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   p : cupicef.Term cupicef.prop (preorder A R) =>
   match____preorder cupicef.prop A R
     (p0 : cupicef.Term cupicef.prop (preorder A R) => transitive A R)
     (preord__refl0 : cupicef.Term cupicef.prop (reflexive A R) =>
      preord__trans0 : cupicef.Term cupicef.prop (transitive A R) =>
      preord__trans0)
     p.

def order :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  cupicef.Univ cupicef.prop.

def Build__order :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  ord__refl0 : cupicef.Term cupicef.prop (reflexive A R) ->
  ord__trans0 : cupicef.Term cupicef.prop (transitive A R) ->
  ord__antisym0 : cupicef.Term cupicef.prop (antisymmetric A R) ->
  cupicef.Term cupicef.prop (order A R).

[ ] cupicef.code_guarded? _ (Build__order _ _ _ _ _) --> cupicef.guarded.

def match____order :
  s : cupicef.Sort ->
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  P : (cupicef.Term cupicef.prop (order A R) -> cupicef.Univ s) ->
  case__Build__order :
    (ord__refl0 : cupicef.Term cupicef.prop (reflexive A R) ->
     ord__trans0 : cupicef.Term cupicef.prop (transitive A R) ->
     ord__antisym0 : cupicef.Term cupicef.prop (antisymmetric A R) ->
     cupicef.Term s
       (P (Build__order A R ord__refl0 ord__trans0 ord__antisym0))) ->
  x : cupicef.Term cupicef.prop (order A R) ->
  cupicef.Term s (P x).

[ s, A, R, P, case__Build__order, ord__refl0, ord__trans0, ord__antisym0]
  match____order s A R P case__Build__order
    (Build__order A R ord__refl0 ord__trans0 ord__antisym0)
  -->
  case__Build__order ord__refl0 ord__trans0 ord__antisym0.

[ s, A, R, P, s']
  match____order s A R
    (x => cupicef.uncode _ (cupicef.code (cupicef.cU s') (P x)))
  -->
  match____order s' A R (x => P x).

def ord__refl :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  o : cupicef.Term cupicef.prop (order A R) ->
  cupicef.Term cupicef.prop (reflexive A R)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   R :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   o : cupicef.Term cupicef.prop (order A R) =>
   match____order cupicef.prop A R
     (o0 : cupicef.Term cupicef.prop (order A R) => reflexive A R)
     (ord__refl0 : cupicef.Term cupicef.prop (reflexive A R) =>
      ord__trans0 : cupicef.Term cupicef.prop (transitive A R) =>
      ord__antisym0 : cupicef.Term cupicef.prop (antisymmetric A R) =>
      ord__refl0)
     o.

def ord__trans :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  o : cupicef.Term cupicef.prop (order A R) ->
  cupicef.Term cupicef.prop (transitive A R)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   R :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   o : cupicef.Term cupicef.prop (order A R) =>
   match____order cupicef.prop A R
     (o0 : cupicef.Term cupicef.prop (order A R) => transitive A R)
     (ord__refl0 : cupicef.Term cupicef.prop (reflexive A R) =>
      ord__trans0 : cupicef.Term cupicef.prop (transitive A R) =>
      ord__antisym0 : cupicef.Term cupicef.prop (antisymmetric A R) =>
      ord__trans0)
     o.

def ord__antisym :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  o : cupicef.Term cupicef.prop (order A R) ->
  cupicef.Term cupicef.prop (antisymmetric A R)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   R :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   o : cupicef.Term cupicef.prop (order A R) =>
   match____order cupicef.prop A R
     (o0 : cupicef.Term cupicef.prop (order A R) => antisymmetric A R)
     (ord__refl0 : cupicef.Term cupicef.prop (reflexive A R) =>
      ord__trans0 : cupicef.Term cupicef.prop (transitive A R) =>
      ord__antisym0 : cupicef.Term cupicef.prop (antisymmetric A R) =>
      ord__antisym0)
     o.

def equivalence :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  cupicef.Univ cupicef.prop.

def Build__equivalence :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  equiv__refl0 : cupicef.Term cupicef.prop (reflexive A R) ->
  equiv__trans0 : cupicef.Term cupicef.prop (transitive A R) ->
  equiv__sym0 : cupicef.Term cupicef.prop (symmetric A R) ->
  cupicef.Term cupicef.prop (equivalence A R).

[ ] cupicef.code_guarded? _ (Build__equivalence _ _ _ _ _) --> cupicef.guarded.

def match____equivalence :
  s : cupicef.Sort ->
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  P : (cupicef.Term cupicef.prop (equivalence A R) -> cupicef.Univ s) ->
  case__Build__equivalence :
    (equiv__refl0 : cupicef.Term cupicef.prop (reflexive A R) ->
     equiv__trans0 : cupicef.Term cupicef.prop (transitive A R) ->
     equiv__sym0 : cupicef.Term cupicef.prop (symmetric A R) ->
     cupicef.Term s
       (P (Build__equivalence A R equiv__refl0 equiv__trans0 equiv__sym0))) ->
  x : cupicef.Term cupicef.prop (equivalence A R) ->
  cupicef.Term s (P x).

[ s, A, R, P, case__Build__equivalence, equiv__refl0, equiv__trans0, equiv__sym0]
  match____equivalence s A R P case__Build__equivalence
    (Build__equivalence A R equiv__refl0 equiv__trans0 equiv__sym0)
  -->
  case__Build__equivalence equiv__refl0 equiv__trans0 equiv__sym0.

[ s, A, R, P, s']
  match____equivalence s A R
    (x => cupicef.uncode _ (cupicef.code (cupicef.cU s') (P x)))
  -->
  match____equivalence s' A R (x => P x).

def equiv__refl :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  e : cupicef.Term cupicef.prop (equivalence A R) ->
  cupicef.Term cupicef.prop (reflexive A R)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   R :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   e : cupicef.Term cupicef.prop (equivalence A R) =>
   match____equivalence cupicef.prop A R
     (e0 : cupicef.Term cupicef.prop (equivalence A R) => reflexive A R)
     (equiv__refl0 : cupicef.Term cupicef.prop (reflexive A R) =>
      equiv__trans0 : cupicef.Term cupicef.prop (transitive A R) =>
      equiv__sym0 : cupicef.Term cupicef.prop (symmetric A R) =>
      equiv__refl0)
     e.

def equiv__trans :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  e : cupicef.Term cupicef.prop (equivalence A R) ->
  cupicef.Term cupicef.prop (transitive A R)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   R :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   e : cupicef.Term cupicef.prop (equivalence A R) =>
   match____equivalence cupicef.prop A R
     (e0 : cupicef.Term cupicef.prop (equivalence A R) => transitive A R)
     (equiv__refl0 : cupicef.Term cupicef.prop (reflexive A R) =>
      equiv__trans0 : cupicef.Term cupicef.prop (transitive A R) =>
      equiv__sym0 : cupicef.Term cupicef.prop (symmetric A R) =>
      equiv__trans0)
     e.

def equiv__sym :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  e : cupicef.Term cupicef.prop (equivalence A R) ->
  cupicef.Term cupicef.prop (symmetric A R)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   R :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   e : cupicef.Term cupicef.prop (equivalence A R) =>
   match____equivalence cupicef.prop A R
     (e0 : cupicef.Term cupicef.prop (equivalence A R) => symmetric A R)
     (equiv__refl0 : cupicef.Term cupicef.prop (reflexive A R) =>
      equiv__trans0 : cupicef.Term cupicef.prop (transitive A R) =>
      equiv__sym0 : cupicef.Term cupicef.prop (symmetric A R) =>
      equiv__sym0)
     e.

def PER :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  cupicef.Univ cupicef.prop.

def Build__PER :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  per__sym0 : cupicef.Term cupicef.prop (symmetric A R) ->
  per__trans0 : cupicef.Term cupicef.prop (transitive A R) ->
  cupicef.Term cupicef.prop (PER A R).

[ ] cupicef.code_guarded? _ (Build__PER _ _ _ _) --> cupicef.guarded.

def match____PER :
  s : cupicef.Sort ->
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  P : (cupicef.Term cupicef.prop (PER A R) -> cupicef.Univ s) ->
  case__Build__PER :
    (per__sym0 : cupicef.Term cupicef.prop (symmetric A R) ->
     per__trans0 : cupicef.Term cupicef.prop (transitive A R) ->
     cupicef.Term s (P (Build__PER A R per__sym0 per__trans0))) ->
  x : cupicef.Term cupicef.prop (PER A R) ->
  cupicef.Term s (P x).

[ s, A, R, P, case__Build__PER, per__sym0, per__trans0]
  match____PER s A R P case__Build__PER
    (Build__PER A R per__sym0 per__trans0)
  -->
  case__Build__PER per__sym0 per__trans0.

[ s, A, R, P, s']
  match____PER s A R
    (x => cupicef.uncode _ (cupicef.code (cupicef.cU s') (P x)))
  -->
  match____PER s' A R (x => P x).

def per__sym :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  p : cupicef.Term cupicef.prop (PER A R) ->
  cupicef.Term cupicef.prop (symmetric A R)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   R :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   p : cupicef.Term cupicef.prop (PER A R) =>
   match____PER cupicef.prop A R
     (p0 : cupicef.Term cupicef.prop (PER A R) => symmetric A R)
     (per__sym0 : cupicef.Term cupicef.prop (symmetric A R) =>
      per__trans0 : cupicef.Term cupicef.prop (transitive A R) =>
      per__sym0)
     p.

def per__trans :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  p : cupicef.Term cupicef.prop (PER A R) ->
  cupicef.Term cupicef.prop (transitive A R)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   R :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   p : cupicef.Term cupicef.prop (PER A R) =>
   match____PER cupicef.prop A R
     (p0 : cupicef.Term cupicef.prop (PER A R) => transitive A R)
     (per__sym0 : cupicef.Term cupicef.prop (symmetric A R) =>
      per__trans0 : cupicef.Term cupicef.prop (transitive A R) =>
      per__trans0)
     p.

def inclusion :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R1 :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  R2 :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  cupicef.Univ cupicef.prop

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   R1 :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   R2 :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   cupicef.prod (cupicef.type (cupicef.s cupicef.z))
     (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule cupicef.prop cupicef.prop))
     (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.prop cupicef.prop)))
     cupicef.I A
     (x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
      cupicef.prod (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule cupicef.prop cupicef.prop)
        (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.prop cupicef.prop))
        cupicef.I A
        (y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
         cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I (R1 x y)
           (__ : cupicef.Term cupicef.prop (R1 x y) => R2 x y))).

def same__relation :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R1 :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  R2 :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  cupicef.Univ cupicef.prop

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   R1 :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   R2 :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   Coq__Init__Logic.and (inclusion A R1 R2) (inclusion A R2 R1).

def commut :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  R1 :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  R2 :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (relation A) ->
  cupicef.Univ cupicef.prop

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   R1 :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   R2 :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (relation A) =>
   cupicef.prod (cupicef.type (cupicef.s cupicef.z))
     (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule cupicef.prop
           (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule cupicef.prop cupicef.prop))))
     (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.prop
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule cupicef.prop cupicef.prop)))))
     cupicef.I A
     (x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
      cupicef.prod (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule cupicef.prop
           (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule cupicef.prop cupicef.prop)))
        (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.prop
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule cupicef.prop cupicef.prop))))
        cupicef.I A
        (y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
         cupicef.prod cupicef.prop
           (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule cupicef.prop cupicef.prop))
           (cupicef.rule cupicef.prop
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule cupicef.prop cupicef.prop)))
           cupicef.I (R1 y x)
           (__ : cupicef.Term cupicef.prop (R1 y x) =>
            cupicef.prod (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule cupicef.prop cupicef.prop)
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule cupicef.prop cupicef.prop))
              cupicef.I A
              (z : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
               cupicef.prod cupicef.prop cupicef.prop
                 (cupicef.rule cupicef.prop cupicef.prop) cupicef.I (
                 R2 z y)
                 (__0 : cupicef.Term cupicef.prop (R2 z y) =>
                  Coq__Init__Logic.ex2 A
                    (y_27_ :
                       cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
                     R2 y_27_ x)
                    (y_27_ :
                       cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
                     R1 z y_27_)))))).

(; End of translation. ;)
