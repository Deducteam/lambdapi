(; This file was automatically generated by Coqine. ;)
(; The encoding used was: "template_cic". ;)

thm decide__left :
  C : cupicef.Univ cupicef.prop ->
  decide :
    cupicef.Term cupicef.set
      (Coq__Init__Specif.sumbool C (Coq__Init__Logic.not C)) ->
  __ : cupicef.Term cupicef.prop C ->
  P :
    (__0 :
       cupicef.Term cupicef.set
         (Coq__Init__Specif.sumbool C (Coq__Init__Logic.not C)) ->
     cupicef.Univ cupicef.prop) ->
  __0 :
    (H : cupicef.Term cupicef.prop C ->
     cupicef.Term cupicef.prop
       (P (Coq__Init__Specif.left C (Coq__Init__Logic.not C) H))) ->
  cupicef.Term cupicef.prop (P decide)

:= C : cupicef.Univ cupicef.prop =>
   decide :
     cupicef.Term cupicef.set
       (Coq__Init__Specif.sumbool C (Coq__Init__Logic.not C)) =>
   H : cupicef.Term cupicef.prop C =>
   P :
     (__ :
        cupicef.Term cupicef.set
          (Coq__Init__Specif.sumbool C (Coq__Init__Logic.not C)) ->
      cupicef.Univ cupicef.prop) =>
   H0 :
     (H0 : cupicef.Term cupicef.prop C ->
      cupicef.Term cupicef.prop
        (P (Coq__Init__Specif.left C (Coq__Init__Logic.not C) H0))) =>
   Coq__Init__Specif.match____sumbool cupicef.prop C (Coq__Init__Logic.not C)
     (s :
        cupicef.Term cupicef.set
          (Coq__Init__Specif.sumbool C (Coq__Init__Logic.not C)) =>
      P s)
     (c : cupicef.Term cupicef.prop C => H0 c)
     (n : cupicef.Term cupicef.prop (Coq__Init__Logic.not C) =>
      Coq__Init__Logic.False__ind
        (P (Coq__Init__Specif.right C (Coq__Init__Logic.not C) n)) (n H))
     decide.

thm decide__right :
  C : cupicef.Univ cupicef.prop ->
  decide :
    cupicef.Term cupicef.set
      (Coq__Init__Specif.sumbool C (Coq__Init__Logic.not C)) ->
  __ : cupicef.Term cupicef.prop (Coq__Init__Logic.not C) ->
  P :
    (__0 :
       cupicef.Term cupicef.set
         (Coq__Init__Specif.sumbool C (Coq__Init__Logic.not C)) ->
     cupicef.Univ cupicef.prop) ->
  __0 :
    (H : cupicef.Term cupicef.prop (Coq__Init__Logic.not C) ->
     cupicef.Term cupicef.prop
       (P (Coq__Init__Specif.right C (Coq__Init__Logic.not C) H))) ->
  cupicef.Term cupicef.prop (P decide)

:= C : cupicef.Univ cupicef.prop =>
   decide :
     cupicef.Term cupicef.set
       (Coq__Init__Specif.sumbool C (Coq__Init__Logic.not C)) =>
   H : cupicef.Term cupicef.prop (Coq__Init__Logic.not C) =>
   P :
     (__ :
        cupicef.Term cupicef.set
          (Coq__Init__Specif.sumbool C (Coq__Init__Logic.not C)) ->
      cupicef.Univ cupicef.prop) =>
   H0 :
     (H0 : cupicef.Term cupicef.prop (Coq__Init__Logic.not C) ->
      cupicef.Term cupicef.prop
        (P (Coq__Init__Specif.right C (Coq__Init__Logic.not C) H0))) =>
   Coq__Init__Specif.match____sumbool cupicef.prop C (Coq__Init__Logic.not C)
     (s :
        cupicef.Term cupicef.set
          (Coq__Init__Specif.sumbool C (Coq__Init__Logic.not C)) =>
      P s)
     (c : cupicef.Term cupicef.prop C =>
      Coq__Init__Logic.False__ind
        (P (Coq__Init__Specif.left C (Coq__Init__Logic.not C) c)) (H c))
     (n : cupicef.Term cupicef.prop (Coq__Init__Logic.not C) => H0 n) decide.

(; End of translation. ;)
