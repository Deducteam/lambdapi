(; This file was automatically generated by Coqine. ;)
(; The encoding used was: "template_cic". ;)

def compose :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  C : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  g :
    (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B ->
     cupicef.Term (cupicef.type (cupicef.s cupicef.z)) C) ->
  f :
    (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B) ->
  x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) C

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   C : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   g :
     (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B ->
      cupicef.Term (cupicef.type (cupicef.s cupicef.z)) C) =>
   f :
     (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B) =>
   x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
   g (f x).

def arrow :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  cupicef.Univ
    (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
       (cupicef.type (cupicef.s cupicef.z)))

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   cupicef.prod (cupicef.type (cupicef.s cupicef.z))
     (cupicef.type (cupicef.s cupicef.z))
     (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
        (cupicef.type (cupicef.s cupicef.z)))
     cupicef.I A
     (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A => B).

def impl :
  A : cupicef.Univ cupicef.prop ->
  B : cupicef.Univ cupicef.prop ->
  cupicef.Univ cupicef.prop

:= A : cupicef.Univ cupicef.prop =>
   B : cupicef.Univ cupicef.prop =>
   cupicef.prod cupicef.prop cupicef.prop
     (cupicef.rule cupicef.prop cupicef.prop) cupicef.I A
     (__ : cupicef.Term cupicef.prop A => B).

def const :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
  __ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
   __ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B =>
   a.

def flip :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  C : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  f :
    (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B ->
     cupicef.Term (cupicef.type (cupicef.s cupicef.z)) C) ->
  x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B ->
  y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) C

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   C : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   f :
     (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B ->
      cupicef.Term (cupicef.type (cupicef.s cupicef.z)) C) =>
   x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B =>
   y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
   f y x.

def apply :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  f :
    (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B) ->
  x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   f :
     (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B) =>
   x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
   f x.

(; End of translation. ;)
