(; This file was automatically generated by Coqine. ;)
(; The encoding used was: "template_cic". ;)

def Empty__set :
  cupicef.Univ cupicef.set.

def match____Empty__set :
  s : cupicef.Sort ->
  P : (cupicef.Term cupicef.set Empty__set -> cupicef.Univ s) ->
  x : cupicef.Term cupicef.set Empty__set ->
  cupicef.Term s (P x).

[ s, P, s']
  match____Empty__set s
    (x => cupicef.uncode _ (cupicef.code (cupicef.cU s') (P x)))
  -->
  match____Empty__set s' (x => P x).

def Empty__set__rect :
  P :
    (e : cupicef.Term cupicef.set Empty__set ->
     cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) ->
  e : cupicef.Term cupicef.set Empty__set ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P e)

:= P :
     (e : cupicef.Term cupicef.set Empty__set ->
      cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) =>
   e : cupicef.Term cupicef.set Empty__set =>
   match____Empty__set (cupicef.type (cupicef.s cupicef.z))
     (e0 : cupicef.Term cupicef.set Empty__set => P e0) e.

def Empty__set__ind :
  P : (e : cupicef.Term cupicef.set Empty__set -> cupicef.Univ cupicef.prop) ->
  e : cupicef.Term cupicef.set Empty__set ->
  cupicef.Term cupicef.prop (P e)

:= P : (e : cupicef.Term cupicef.set Empty__set -> cupicef.Univ cupicef.prop) =>
   e : cupicef.Term cupicef.set Empty__set =>
   match____Empty__set cupicef.prop
     (e0 : cupicef.Term cupicef.set Empty__set => P e0) e.

def Empty__set__rec :
  P : (e : cupicef.Term cupicef.set Empty__set -> cupicef.Univ cupicef.set) ->
  e : cupicef.Term cupicef.set Empty__set ->
  cupicef.Term cupicef.set (P e)

:= P : (e : cupicef.Term cupicef.set Empty__set -> cupicef.Univ cupicef.set) =>
   Empty__set__rect
     (cupicef.cast
        (cupicef.rule cupicef.set (cupicef.type (cupicef.s cupicef.z)))
        (cupicef.rule cupicef.set
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
        (cupicef.prod cupicef.set (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.set (cupicef.type (cupicef.s cupicef.z)))
           cupicef.I Empty__set
           (e : cupicef.Term cupicef.set Empty__set =>
            cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
              cupicef.I))
        (cupicef.prod cupicef.set
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.rule cupicef.set
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
           cupicef.I Empty__set
           (e : cupicef.Term cupicef.set Empty__set =>
            cupicef.univ (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))) cupicef.I))
        cupicef.I P).

def unit :
  cupicef.Univ cupicef.set.

def tt :
  cupicef.Term cupicef.set unit.

[ ] cupicef.code_guarded? _ tt --> cupicef.guarded.

def match____unit :
  s : cupicef.Sort ->
  P : (cupicef.Term cupicef.set unit -> cupicef.Univ s) ->
  case__tt : cupicef.Term s (P tt) ->
  x : cupicef.Term cupicef.set unit ->
  cupicef.Term s (P x).

[ s, P, case__tt]
  match____unit s P case__tt tt
  -->
  case__tt.

[ s, P, s']
  match____unit s
    (x => cupicef.uncode _ (cupicef.code (cupicef.cU s') (P x)))
  -->
  match____unit s' (x => P x).

def unit__rect :
  P :
    (u : cupicef.Term cupicef.set unit ->
     cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) ->
  f : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P tt) ->
  u : cupicef.Term cupicef.set unit ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P u)

:= P :
     (u : cupicef.Term cupicef.set unit ->
      cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) =>
   f : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P tt) =>
   u : cupicef.Term cupicef.set unit =>
   match____unit (cupicef.type (cupicef.s cupicef.z))
     (u0 : cupicef.Term cupicef.set unit => P u0) f u.

def unit__ind :
  P : (u : cupicef.Term cupicef.set unit -> cupicef.Univ cupicef.prop) ->
  f : cupicef.Term cupicef.prop (P tt) ->
  u : cupicef.Term cupicef.set unit ->
  cupicef.Term cupicef.prop (P u)

:= P : (u : cupicef.Term cupicef.set unit -> cupicef.Univ cupicef.prop) =>
   f : cupicef.Term cupicef.prop (P tt) =>
   u : cupicef.Term cupicef.set unit =>
   match____unit cupicef.prop (u0 : cupicef.Term cupicef.set unit => P u0) f
     u.

def unit__rec :
  P : (u : cupicef.Term cupicef.set unit -> cupicef.Univ cupicef.set) ->
  f : cupicef.Term cupicef.set (P tt) ->
  u : cupicef.Term cupicef.set unit ->
  cupicef.Term cupicef.set (P u)

:= P : (u : cupicef.Term cupicef.set unit -> cupicef.Univ cupicef.set) =>
   unit__rect
     (cupicef.cast
        (cupicef.rule cupicef.set (cupicef.type (cupicef.s cupicef.z)))
        (cupicef.rule cupicef.set
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
        (cupicef.prod cupicef.set (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.set (cupicef.type (cupicef.s cupicef.z)))
           cupicef.I unit
           (u : cupicef.Term cupicef.set unit =>
            cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
              cupicef.I))
        (cupicef.prod cupicef.set
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.rule cupicef.set
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
           cupicef.I unit
           (u : cupicef.Term cupicef.set unit =>
            cupicef.univ (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))) cupicef.I))
        cupicef.I P).

def bool :
  cupicef.Univ cupicef.set.

def true :
  cupicef.Term cupicef.set bool.

def false :
  cupicef.Term cupicef.set bool.

[ ] cupicef.code_guarded? _ true --> cupicef.guarded.

[ ] cupicef.code_guarded? _ false --> cupicef.guarded.

def match____bool :
  s : cupicef.Sort ->
  P : (cupicef.Term cupicef.set bool -> cupicef.Univ s) ->
  case__true : cupicef.Term s (P true) ->
  case__false : cupicef.Term s (P false) ->
  x : cupicef.Term cupicef.set bool ->
  cupicef.Term s (P x).

[ s, P, case__true, case__false]
  match____bool s P case__true case__false true
  -->
  case__true.

[ s, P, case__true, case__false]
  match____bool s P case__true case__false false
  -->
  case__false.

[ s, P, s']
  match____bool s
    (x => cupicef.uncode _ (cupicef.code (cupicef.cU s') (P x)))
  -->
  match____bool s' (x => P x).

def bool__rect :
  P :
    (b : cupicef.Term cupicef.set bool ->
     cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) ->
  f : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P true) ->
  f0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P false) ->
  b : cupicef.Term cupicef.set bool ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P b)

:= P :
     (b : cupicef.Term cupicef.set bool ->
      cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) =>
   f : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P true) =>
   f0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P false) =>
   b : cupicef.Term cupicef.set bool =>
   match____bool (cupicef.type (cupicef.s cupicef.z))
     (b0 : cupicef.Term cupicef.set bool => P b0) f f0 b.

def bool__ind :
  P : (b : cupicef.Term cupicef.set bool -> cupicef.Univ cupicef.prop) ->
  f : cupicef.Term cupicef.prop (P true) ->
  f0 : cupicef.Term cupicef.prop (P false) ->
  b : cupicef.Term cupicef.set bool ->
  cupicef.Term cupicef.prop (P b)

:= P : (b : cupicef.Term cupicef.set bool -> cupicef.Univ cupicef.prop) =>
   f : cupicef.Term cupicef.prop (P true) =>
   f0 : cupicef.Term cupicef.prop (P false) =>
   b : cupicef.Term cupicef.set bool =>
   match____bool cupicef.prop (b0 : cupicef.Term cupicef.set bool => P b0) f
     f0 b.

def bool__rec :
  P : (b : cupicef.Term cupicef.set bool -> cupicef.Univ cupicef.set) ->
  f : cupicef.Term cupicef.set (P true) ->
  f0 : cupicef.Term cupicef.set (P false) ->
  b : cupicef.Term cupicef.set bool ->
  cupicef.Term cupicef.set (P b)

:= P : (b : cupicef.Term cupicef.set bool -> cupicef.Univ cupicef.set) =>
   bool__rect
     (cupicef.cast
        (cupicef.rule cupicef.set (cupicef.type (cupicef.s cupicef.z)))
        (cupicef.rule cupicef.set
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
        (cupicef.prod cupicef.set (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.set (cupicef.type (cupicef.s cupicef.z)))
           cupicef.I bool
           (b : cupicef.Term cupicef.set bool =>
            cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
              cupicef.I))
        (cupicef.prod cupicef.set
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.rule cupicef.set
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
           cupicef.I bool
           (b : cupicef.Term cupicef.set bool =>
            cupicef.univ (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))) cupicef.I))
        cupicef.I P).

def andb :
  b1 : cupicef.Term cupicef.set bool ->
  b2 : cupicef.Term cupicef.set bool ->
  cupicef.Term cupicef.set bool

:= b1 : cupicef.Term cupicef.set bool =>
   b2 : cupicef.Term cupicef.set bool =>
   match____bool cupicef.set (b3 : cupicef.Term cupicef.set bool => bool) b2
     false b1.

def orb :
  b1 : cupicef.Term cupicef.set bool ->
  b2 : cupicef.Term cupicef.set bool ->
  cupicef.Term cupicef.set bool

:= b1 : cupicef.Term cupicef.set bool =>
   b2 : cupicef.Term cupicef.set bool =>
   match____bool cupicef.set (b3 : cupicef.Term cupicef.set bool => bool)
     true b2 b1.

def implb :
  b1 : cupicef.Term cupicef.set bool ->
  b2 : cupicef.Term cupicef.set bool ->
  cupicef.Term cupicef.set bool

:= b1 : cupicef.Term cupicef.set bool =>
   b2 : cupicef.Term cupicef.set bool =>
   match____bool cupicef.set (b3 : cupicef.Term cupicef.set bool => bool) b2
     true b1.

def xorb :
  b1 : cupicef.Term cupicef.set bool ->
  b2 : cupicef.Term cupicef.set bool ->
  cupicef.Term cupicef.set bool

:= b1 : cupicef.Term cupicef.set bool =>
   b2 : cupicef.Term cupicef.set bool =>
   match____bool cupicef.set (b3 : cupicef.Term cupicef.set bool => bool)
     (match____bool cupicef.set (b3 : cupicef.Term cupicef.set bool => bool)
        false true b2)
     (match____bool cupicef.set (b3 : cupicef.Term cupicef.set bool => bool)
        true false b2)
     b1.

def negb :
  b : cupicef.Term cupicef.set bool -> cupicef.Term cupicef.set bool

:= b : cupicef.Term cupicef.set bool =>
   match____bool cupicef.set (b0 : cupicef.Term cupicef.set bool => bool)
     false true b.

thm andb__prop :
  a : cupicef.Term cupicef.set bool ->
  b : cupicef.Term cupicef.set bool ->
  __ :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I bool)
         (andb a b) true) ->
  cupicef.Term cupicef.prop
    (Coq__Init__Logic.and
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I bool)
          a true)
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I bool)
          b true))

:= a : cupicef.Term cupicef.set bool =>
   match____bool cupicef.prop
     (b : cupicef.Term cupicef.set bool =>
      cupicef.prod cupicef.set (cupicef.rule cupicef.prop cupicef.prop)
        (cupicef.rule cupicef.set (cupicef.rule cupicef.prop cupicef.prop))
        cupicef.I bool
        (b0 : cupicef.Term cupicef.set bool =>
         cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I bool)
              (andb b b0) true)
           (__ :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.eq
                   (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      (cupicef.univ cupicef.set
                         (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                      (cupicef.univ
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         cupicef.I)
                      cupicef.I bool)
                   (andb b b0) true) =>
            Coq__Init__Logic.and
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 b true)
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 b0 true))))
     (b : cupicef.Term cupicef.set bool =>
      match____bool cupicef.prop
        (b0 : cupicef.Term cupicef.set bool =>
         cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I bool)
              (andb true b0) true)
           (__ :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.eq
                   (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      (cupicef.univ cupicef.set
                         (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                      (cupicef.univ
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         cupicef.I)
                      cupicef.I bool)
                   (andb true b0) true) =>
            Coq__Init__Logic.and
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 true true)
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 b0 true)))
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I bool)
                (andb true true) true) =>
         Coq__Init__Logic.conj
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I bool)
              true true)
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I bool)
              true true)
           (Coq__Init__Logic.eq__refl
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I bool)
              true)
           (Coq__Init__Logic.eq__refl
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I bool)
              true))
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I bool)
                (andb true false) true) =>
         Coq__Init__Logic.conj
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I bool)
              true true)
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I bool)
              false true)
           (Coq__Init__Logic.eq__refl
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I bool)
              true)
           H)
        b)
     (b : cupicef.Term cupicef.set bool =>
      match____bool cupicef.prop
        (b0 : cupicef.Term cupicef.set bool =>
         cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I bool)
              (andb false b0) true)
           (__ :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.eq
                   (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      (cupicef.univ cupicef.set
                         (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                      (cupicef.univ
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         cupicef.I)
                      cupicef.I bool)
                   (andb false b0) true) =>
            Coq__Init__Logic.and
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 false true)
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 b0 true)))
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I bool)
                (andb false true) true) =>
         Coq__Init__Logic.conj
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I bool)
              false true)
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I bool)
              true true)
           H
           (Coq__Init__Logic.eq__refl
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I bool)
              true))
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I bool)
                (andb false false) true) =>
         Coq__Init__Logic.conj
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I bool)
              false true)
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I bool)
              false true)
           H H)
        b)
     a.

thm andb__true__intro :
  b1 : cupicef.Term cupicef.set bool ->
  b2 : cupicef.Term cupicef.set bool ->
  __ :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.and
         (Coq__Init__Logic.eq
            (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                  cupicef.I)
               (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                  (cupicef.axiom
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                  cupicef.I)
               cupicef.I bool)
            b1 true)
         (Coq__Init__Logic.eq
            (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                  cupicef.I)
               (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                  (cupicef.axiom
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                  cupicef.I)
               cupicef.I bool)
            b2 true)) ->
  cupicef.Term cupicef.prop
    (Coq__Init__Logic.eq
       (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
          (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
          (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
             cupicef.I)
          (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             cupicef.I)
          cupicef.I bool)
       (andb b1 b2) true)

:= b1 : cupicef.Term cupicef.set bool =>
   match____bool cupicef.prop
     (b : cupicef.Term cupicef.set bool =>
      cupicef.prod cupicef.set (cupicef.rule cupicef.prop cupicef.prop)
        (cupicef.rule cupicef.set (cupicef.rule cupicef.prop cupicef.prop))
        cupicef.I bool
        (b2 : cupicef.Term cupicef.set bool =>
         cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.and
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 b true)
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 b2 true))
           (__ :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.and
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      b true)
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      b2 true)) =>
            Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I bool)
              (andb b b2) true)))
     (b2 : cupicef.Term cupicef.set bool =>
      match____bool cupicef.prop
        (b : cupicef.Term cupicef.set bool =>
         cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.and
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 true true)
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 b true))
           (__ :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.and
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      true true)
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      b true)) =>
            Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I bool)
              (andb true b) true))
        (cupicef.cast (cupicef.rule cupicef.prop cupicef.prop)
           (cupicef.rule cupicef.prop cupicef.prop)
           (cupicef.prod cupicef.prop cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
              (Coq__Init__Logic.and
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I bool)
                    true true)
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I bool)
                    true true))
              (H :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.and
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         true true)
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         true true)) =>
               Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 true true))
           (cupicef.prod cupicef.prop cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
              (Coq__Init__Logic.and
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I bool)
                    true true)
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I bool)
                    true true))
              (__ :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.and
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         true true)
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         true true)) =>
               Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 (andb true true) true))
           cupicef.I
           (H :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.and
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      true true)
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      true true)) =>
            Coq__Init__Logic.match____and cupicef.prop
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 true true)
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 true true)
              (__ :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.and
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         true true)
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         true true)) =>
               Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 true true)
              (H0 :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      true true) =>
               H1 :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      true true) =>
               H1)
              H))
        (cupicef.cast (cupicef.rule cupicef.prop cupicef.prop)
           (cupicef.rule cupicef.prop cupicef.prop)
           (cupicef.prod cupicef.prop cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
              (Coq__Init__Logic.and
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I bool)
                    true true)
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I bool)
                    false true))
              (H :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.and
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         true true)
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         false true)) =>
               Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 false true))
           (cupicef.prod cupicef.prop cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
              (Coq__Init__Logic.and
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I bool)
                    true true)
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I bool)
                    false true))
              (__ :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.and
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         true true)
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         false true)) =>
               Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 (andb true false) true))
           cupicef.I
           (H :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.and
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      true true)
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      false true)) =>
            Coq__Init__Logic.match____and cupicef.prop
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 true true)
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 false true)
              (__ :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.and
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         true true)
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         false true)) =>
               Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 false true)
              (H0 :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      true true) =>
               H1 :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      false true) =>
               H1)
              H))
        b2)
     (b2 : cupicef.Term cupicef.set bool =>
      match____bool cupicef.prop
        (b : cupicef.Term cupicef.set bool =>
         cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.and
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 false true)
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 b true))
           (__ :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.and
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      false true)
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      b true)) =>
            Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I bool)
              (andb false b) true))
        (cupicef.cast (cupicef.rule cupicef.prop cupicef.prop)
           (cupicef.rule cupicef.prop cupicef.prop)
           (cupicef.prod cupicef.prop cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
              (Coq__Init__Logic.and
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I bool)
                    false true)
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I bool)
                    true true))
              (H :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.and
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         false true)
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         true true)) =>
               Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 false true))
           (cupicef.prod cupicef.prop cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
              (Coq__Init__Logic.and
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I bool)
                    false true)
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I bool)
                    true true))
              (__ :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.and
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         false true)
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         true true)) =>
               Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 (andb false true) true))
           cupicef.I
           (H :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.and
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      false true)
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      true true)) =>
            Coq__Init__Logic.match____and cupicef.prop
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 false true)
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 true true)
              (__ :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.and
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         false true)
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         true true)) =>
               Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 false true)
              (H0 :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      false true) =>
               H1 :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      true true) =>
               H0)
              H))
        (cupicef.cast (cupicef.rule cupicef.prop cupicef.prop)
           (cupicef.rule cupicef.prop cupicef.prop)
           (cupicef.prod cupicef.prop cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
              (Coq__Init__Logic.and
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I bool)
                    false true)
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I bool)
                    false true))
              (H :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.and
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         false true)
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         false true)) =>
               Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 false true))
           (cupicef.prod cupicef.prop cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
              (Coq__Init__Logic.and
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I bool)
                    false true)
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I bool)
                    false true))
              (__ :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.and
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         false true)
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         false true)) =>
               Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 (andb false false) true))
           cupicef.I
           (H :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.and
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      false true)
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      false true)) =>
            Coq__Init__Logic.match____and cupicef.prop
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 false true)
              (Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 false true)
              (__ :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.and
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         false true)
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I bool)
                         false true)) =>
               Coq__Init__Logic.eq
                 (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I bool)
                 false true)
              (H0 :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      false true) =>
               H1 :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I bool)
                      false true) =>
               H1)
              H))
        b2)
     b1.

def eq__true :
  __ : cupicef.Term cupicef.set bool -> cupicef.Univ cupicef.prop.

def is__eq__true :
  cupicef.Term cupicef.prop (eq__true true).

[ ] cupicef.code_guarded? _ is__eq__true --> cupicef.guarded.

def match____eq__true :
  s : cupicef.Sort ->
  P :
    (__ : cupicef.Term cupicef.set bool ->
     cupicef.Term cupicef.prop (eq__true __) ->
     cupicef.Univ s) ->
  case__is__eq__true : cupicef.Term s (P true is__eq__true) ->
  __ : cupicef.Term cupicef.set bool ->
  x : cupicef.Term cupicef.prop (eq__true __) ->
  cupicef.Term s (P __ x).

[ s, P, case__is__eq__true]
  match____eq__true s P case__is__eq__true {true} is__eq__true
  -->
  case__is__eq__true.

[ s, P, s']
  match____eq__true s
    (__ => x => cupicef.uncode _ (cupicef.code (cupicef.cU s') (P __ x)))
  -->
  match____eq__true s' (__ => x => P __ x).

def eq__true__rect :
  P :
    (__ : cupicef.Term cupicef.set bool ->
     cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) ->
  f : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P true) ->
  b : cupicef.Term cupicef.set bool ->
  e : cupicef.Term cupicef.prop (eq__true b) ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P b)

:= P :
     (__ : cupicef.Term cupicef.set bool ->
      cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) =>
   f : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P true) =>
   b : cupicef.Term cupicef.set bool =>
   e : cupicef.Term cupicef.prop (eq__true b) =>
   match____eq__true (cupicef.type (cupicef.s cupicef.z))
     (b0 : cupicef.Term cupicef.set bool =>
      __ : cupicef.Term cupicef.prop (eq__true b0) =>
      P b0)
     f b e.

def eq__true__ind :
  P : (__ : cupicef.Term cupicef.set bool -> cupicef.Univ cupicef.prop) ->
  f : cupicef.Term cupicef.prop (P true) ->
  b : cupicef.Term cupicef.set bool ->
  e : cupicef.Term cupicef.prop (eq__true b) ->
  cupicef.Term cupicef.prop (P b)

:= P : (__ : cupicef.Term cupicef.set bool -> cupicef.Univ cupicef.prop) =>
   f : cupicef.Term cupicef.prop (P true) =>
   b : cupicef.Term cupicef.set bool =>
   e : cupicef.Term cupicef.prop (eq__true b) =>
   match____eq__true cupicef.prop
     (b0 : cupicef.Term cupicef.set bool =>
      __ : cupicef.Term cupicef.prop (eq__true b0) =>
      P b0)
     f b e.

def eq__true__rec :
  P : (__ : cupicef.Term cupicef.set bool -> cupicef.Univ cupicef.set) ->
  f : cupicef.Term cupicef.set (P true) ->
  b : cupicef.Term cupicef.set bool ->
  e : cupicef.Term cupicef.prop (eq__true b) ->
  cupicef.Term cupicef.set (P b)

:= P : (__ : cupicef.Term cupicef.set bool -> cupicef.Univ cupicef.set) =>
   eq__true__rect
     (cupicef.cast
        (cupicef.rule cupicef.set (cupicef.type (cupicef.s cupicef.z)))
        (cupicef.rule cupicef.set
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
        (cupicef.prod cupicef.set (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.set (cupicef.type (cupicef.s cupicef.z)))
           cupicef.I bool
           (__ : cupicef.Term cupicef.set bool =>
            cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
              cupicef.I))
        (cupicef.prod cupicef.set
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.rule cupicef.set
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
           cupicef.I bool
           (__ : cupicef.Term cupicef.set bool =>
            cupicef.univ (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))) cupicef.I))
        cupicef.I P).

def is__true :
  b : cupicef.Term cupicef.set bool -> cupicef.Univ cupicef.prop

:= b : cupicef.Term cupicef.set bool =>
   Coq__Init__Logic.eq
     (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
        (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
        (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           cupicef.I)
        cupicef.I bool)
     b true.

def eq__true__ind__r :
  P : (__ : cupicef.Term cupicef.set bool -> cupicef.Univ cupicef.prop) ->
  b : cupicef.Term cupicef.set bool ->
  __ : cupicef.Term cupicef.prop (P b) ->
  __0 : cupicef.Term cupicef.prop (eq__true b) ->
  cupicef.Term cupicef.prop (P true)

:= P : (__ : cupicef.Term cupicef.set bool -> cupicef.Univ cupicef.prop) =>
   b : cupicef.Term cupicef.set bool =>
   H : cupicef.Term cupicef.prop (P b) =>
   H0 : cupicef.Term cupicef.prop (eq__true b) =>
   match____eq__true cupicef.prop
     (b0 : cupicef.Term cupicef.set bool =>
      __ : cupicef.Term cupicef.prop (eq__true b0) =>
      cupicef.prod cupicef.prop cupicef.prop
        (cupicef.rule cupicef.prop cupicef.prop) cupicef.I (P b0)
        (H1 : cupicef.Term cupicef.prop (P b0) => P true))
     (H1 : cupicef.Term cupicef.prop (P true) => H1) b H0 H.

def eq__true__rec__r :
  P : (__ : cupicef.Term cupicef.set bool -> cupicef.Univ cupicef.set) ->
  b : cupicef.Term cupicef.set bool ->
  __ : cupicef.Term cupicef.set (P b) ->
  __0 : cupicef.Term cupicef.prop (eq__true b) ->
  cupicef.Term cupicef.set (P true)

:= P : (__ : cupicef.Term cupicef.set bool -> cupicef.Univ cupicef.set) =>
   b : cupicef.Term cupicef.set bool =>
   H : cupicef.Term cupicef.set (P b) =>
   H0 : cupicef.Term cupicef.prop (eq__true b) =>
   match____eq__true cupicef.set
     (b0 : cupicef.Term cupicef.set bool =>
      __ : cupicef.Term cupicef.prop (eq__true b0) =>
      cupicef.prod cupicef.set cupicef.set
        (cupicef.rule cupicef.set cupicef.set) cupicef.I (P b0)
        (H1 : cupicef.Term cupicef.set (P b0) => P true))
     (H1 : cupicef.Term cupicef.set (P true) => H1) b H0 H.

def eq__true__rect__r :
  P :
    (__ : cupicef.Term cupicef.set bool ->
     cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) ->
  b : cupicef.Term cupicef.set bool ->
  __ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P b) ->
  __0 : cupicef.Term cupicef.prop (eq__true b) ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P true)

:= P :
     (__ : cupicef.Term cupicef.set bool ->
      cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) =>
   b : cupicef.Term cupicef.set bool =>
   H : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P b) =>
   H0 : cupicef.Term cupicef.prop (eq__true b) =>
   match____eq__true (cupicef.type (cupicef.s cupicef.z))
     (b0 : cupicef.Term cupicef.set bool =>
      __ : cupicef.Term cupicef.prop (eq__true b0) =>
      cupicef.prod (cupicef.type (cupicef.s cupicef.z))
        (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
           (cupicef.type (cupicef.s cupicef.z)))
        cupicef.I (P b0)
        (H1 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P b0) =>
         P true))
     (H1 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P true) => H1)
     b H0 H.

def BoolSpec :
  P : cupicef.Univ cupicef.prop ->
  Q : cupicef.Univ cupicef.prop ->
  __ : cupicef.Term cupicef.set bool ->
  cupicef.Univ cupicef.prop.

def BoolSpecT :
  P : cupicef.Univ cupicef.prop ->
  Q : cupicef.Univ cupicef.prop ->
  __ : cupicef.Term cupicef.prop P ->
  cupicef.Term cupicef.prop (BoolSpec P Q true).

def BoolSpecF :
  P : cupicef.Univ cupicef.prop ->
  Q : cupicef.Univ cupicef.prop ->
  __ : cupicef.Term cupicef.prop Q ->
  cupicef.Term cupicef.prop (BoolSpec P Q false).

[ ] cupicef.code_guarded? _ (BoolSpecT _ _ _) --> cupicef.guarded.

[ ] cupicef.code_guarded? _ (BoolSpecF _ _ _) --> cupicef.guarded.

def match____BoolSpec :
  s : cupicef.Sort ->
  P : cupicef.Univ cupicef.prop ->
  Q : cupicef.Univ cupicef.prop ->
  P0 :
    (__ : cupicef.Term cupicef.set bool ->
     cupicef.Term cupicef.prop (BoolSpec P Q __) ->
     cupicef.Univ s) ->
  case__BoolSpecT :
    (__ : cupicef.Term cupicef.prop P ->
     cupicef.Term s (P0 true (BoolSpecT P Q __))) ->
  case__BoolSpecF :
    (__ : cupicef.Term cupicef.prop Q ->
     cupicef.Term s (P0 false (BoolSpecF P Q __))) ->
  __ : cupicef.Term cupicef.set bool ->
  x : cupicef.Term cupicef.prop (BoolSpec P Q __) ->
  cupicef.Term s (P0 __ x).

[ s, P, Q, P0, case__BoolSpecT, case__BoolSpecF, __]
  match____BoolSpec s P Q P0 case__BoolSpecT case__BoolSpecF {true}
    (BoolSpecT P Q __)
  -->
  case__BoolSpecT __.

[ s, P, Q, P0, case__BoolSpecT, case__BoolSpecF, __]
  match____BoolSpec s P Q P0 case__BoolSpecT case__BoolSpecF {false}
    (BoolSpecF P Q __)
  -->
  case__BoolSpecF __.

[ s, P, Q, P0, s']
  match____BoolSpec s P Q
    (__ => x => cupicef.uncode _ (cupicef.code (cupicef.cU s') (P0 __ x)))
  -->
  match____BoolSpec s' P Q (__ => x => P0 __ x).

def BoolSpec__ind :
  P : cupicef.Univ cupicef.prop ->
  Q : cupicef.Univ cupicef.prop ->
  P0 : (__ : cupicef.Term cupicef.set bool -> cupicef.Univ cupicef.prop) ->
  f :
    (__ : cupicef.Term cupicef.prop P -> cupicef.Term cupicef.prop (P0 true)) ->
  f0 :
    (__ : cupicef.Term cupicef.prop Q -> cupicef.Term cupicef.prop (P0 false)) ->
  b : cupicef.Term cupicef.set bool ->
  b0 : cupicef.Term cupicef.prop (BoolSpec P Q b) ->
  cupicef.Term cupicef.prop (P0 b)

:= P : cupicef.Univ cupicef.prop =>
   Q : cupicef.Univ cupicef.prop =>
   P0 : (__ : cupicef.Term cupicef.set bool -> cupicef.Univ cupicef.prop) =>
   f :
     (__ : cupicef.Term cupicef.prop P -> cupicef.Term cupicef.prop (P0 true)) =>
   f0 :
     (__ : cupicef.Term cupicef.prop Q ->
      cupicef.Term cupicef.prop (P0 false)) =>
   b : cupicef.Term cupicef.set bool =>
   b0 : cupicef.Term cupicef.prop (BoolSpec P Q b) =>
   match____BoolSpec cupicef.prop P Q
     (b1 : cupicef.Term cupicef.set bool =>
      __ : cupicef.Term cupicef.prop (BoolSpec P Q b1) =>
      P0 b1)
     f f0 b b0.

def nat :
  cupicef.Univ cupicef.set.

def O :
  cupicef.Term cupicef.set nat.

def S :
  __ : cupicef.Term cupicef.set nat -> cupicef.Term cupicef.set nat.

[ ] cupicef.code_guarded? _ O --> cupicef.guarded.

[ ] cupicef.code_guarded? _ (S _) --> cupicef.guarded.

def match____nat :
  s : cupicef.Sort ->
  P : (cupicef.Term cupicef.set nat -> cupicef.Univ s) ->
  case__O : cupicef.Term s (P O) ->
  case__S : (__ : cupicef.Term cupicef.set nat -> cupicef.Term s (P (S __))) ->
  x : cupicef.Term cupicef.set nat ->
  cupicef.Term s (P x).

[ s, P, case__O, case__S]
  match____nat s P case__O case__S O
  -->
  case__O.

[ s, P, case__O, case__S, __]
  match____nat s P case__O case__S (S __)
  -->
  case__S __.

[ s, P, s']
  match____nat s (x => cupicef.uncode _ (cupicef.code (cupicef.cU s') (P x)))
  -->
  match____nat s' (x => P x).

def nat__rect :
  P :
    (n : cupicef.Term cupicef.set nat ->
     cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) ->
  f : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P O) ->
  f0 :
    (n : cupicef.Term cupicef.set nat ->
     __ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P n) ->
     cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P (S n))) ->
  n : cupicef.Term cupicef.set nat ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P n)

:= P :
     (n : cupicef.Term cupicef.set nat ->
      cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) =>
   f : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P O) =>
   f0 :
     (n : cupicef.Term cupicef.set nat ->
      __ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P n) ->
      cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P (S n))) =>
   cupicef.fixproj cupicef.1
     (c =>
      c
        (cupicef.SA cupicef.0
           (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.prod cupicef.set (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule cupicef.set (cupicef.type (cupicef.s cupicef.z)))
              cupicef.I nat (n : cupicef.Term cupicef.set nat => P n))))
     (c =>
      c
        (F =>
         n : cupicef.Term cupicef.set nat =>
         match____nat (cupicef.type (cupicef.s cupicef.z))
           (n0 : cupicef.Term cupicef.set nat => P n0) f
           (n0 : cupicef.Term cupicef.set nat => f0 n0 (F n0)) n))
     cupicef.0.

def nat__ind :
  P : (n : cupicef.Term cupicef.set nat -> cupicef.Univ cupicef.prop) ->
  f : cupicef.Term cupicef.prop (P O) ->
  f0 :
    (n : cupicef.Term cupicef.set nat ->
     __ : cupicef.Term cupicef.prop (P n) ->
     cupicef.Term cupicef.prop (P (S n))) ->
  n : cupicef.Term cupicef.set nat ->
  cupicef.Term cupicef.prop (P n)

:= P : (n : cupicef.Term cupicef.set nat -> cupicef.Univ cupicef.prop) =>
   f : cupicef.Term cupicef.prop (P O) =>
   f0 :
     (n : cupicef.Term cupicef.set nat ->
      __ : cupicef.Term cupicef.prop (P n) ->
      cupicef.Term cupicef.prop (P (S n))) =>
   cupicef.fixproj cupicef.1
     (c =>
      c
        (cupicef.SA cupicef.0 cupicef.prop
           (cupicef.prod cupicef.set cupicef.prop
              (cupicef.rule cupicef.set cupicef.prop) cupicef.I nat
              (n : cupicef.Term cupicef.set nat => P n))))
     (c =>
      c
        (F =>
         n : cupicef.Term cupicef.set nat =>
         match____nat cupicef.prop
           (n0 : cupicef.Term cupicef.set nat => P n0) f
           (n0 : cupicef.Term cupicef.set nat => f0 n0 (F n0)) n))
     cupicef.0.

def nat__rec :
  P : (n : cupicef.Term cupicef.set nat -> cupicef.Univ cupicef.set) ->
  f : cupicef.Term cupicef.set (P O) ->
  f0 :
    (n : cupicef.Term cupicef.set nat ->
     __ : cupicef.Term cupicef.set (P n) ->
     cupicef.Term cupicef.set (P (S n))) ->
  n : cupicef.Term cupicef.set nat ->
  cupicef.Term cupicef.set (P n)

:= P : (n : cupicef.Term cupicef.set nat -> cupicef.Univ cupicef.set) =>
   nat__rect
     (cupicef.cast
        (cupicef.rule cupicef.set (cupicef.type (cupicef.s cupicef.z)))
        (cupicef.rule cupicef.set
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
        (cupicef.prod cupicef.set (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.set (cupicef.type (cupicef.s cupicef.z)))
           cupicef.I nat
           (n : cupicef.Term cupicef.set nat =>
            cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
              cupicef.I))
        (cupicef.prod cupicef.set
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.rule cupicef.set
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
           cupicef.I nat
           (n : cupicef.Term cupicef.set nat =>
            cupicef.univ (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))) cupicef.I))
        cupicef.I P).

def option :
  Coq__Init__Datatypes__13 : cupicef.Sort ->
  A : cupicef.Univ Coq__Init__Datatypes__13 ->
  cupicef.Univ (cupicef.sup cupicef.set Coq__Init__Datatypes__13).

option' :
  A : cupicef.Univ cupicef.sinf -> cupicef.Univ cupicef.sinf.

[ Coq__Init__Datatypes__13, A]
  cupicef.code (cupicef.cU _) (option Coq__Init__Datatypes__13 A)
  -->
  option' (cupicef.code (cupicef.cU Coq__Init__Datatypes__13) A).

def Coq__Init__Datatypes__13 :
  cupicef.Nat

:= cupicef.s cupicef.z.

def Some :
  A : cupicef.Univ (cupicef.type Coq__Init__Datatypes__13) ->
  __ : cupicef.Term (cupicef.type Coq__Init__Datatypes__13) A ->
  cupicef.Term
    (cupicef.sup cupicef.set (cupicef.type Coq__Init__Datatypes__13))
    (option (cupicef.type Coq__Init__Datatypes__13) A).

def None :
  A : cupicef.Univ (cupicef.type Coq__Init__Datatypes__13) ->
  cupicef.Term
    (cupicef.sup cupicef.set (cupicef.type Coq__Init__Datatypes__13))
    (option (cupicef.type Coq__Init__Datatypes__13) A).

[ ] cupicef.code_guarded? _ (Some _ _) --> cupicef.guarded.

[ ] cupicef.code_guarded? _ (None _) --> cupicef.guarded.

def match____option :
  s : cupicef.Sort ->
  A : cupicef.Univ (cupicef.type Coq__Init__Datatypes__13) ->
  P :
    (cupicef.Term
       (cupicef.sup cupicef.set (cupicef.type Coq__Init__Datatypes__13))
       (option (cupicef.type Coq__Init__Datatypes__13) A) ->
     cupicef.Univ s) ->
  case__Some :
    (__ : cupicef.Term (cupicef.type Coq__Init__Datatypes__13) A ->
     cupicef.Term s (P (Some A __))) ->
  case__None : cupicef.Term s (P (None A)) ->
  x :
    cupicef.Term
      (cupicef.sup cupicef.set (cupicef.type Coq__Init__Datatypes__13))
      (option (cupicef.type Coq__Init__Datatypes__13) A) ->
  cupicef.Term s (P x).

[ s, A, P, case__Some, case__None, __]
  match____option s A P case__Some case__None (Some A __)
  -->
  case__Some __.

[ s, A, P, case__Some, case__None]
  match____option s A P case__Some case__None (None A)
  -->
  case__None.

[ s, A, P, s']
  match____option s A
    (x => cupicef.uncode _ (cupicef.code (cupicef.cU s') (P x)))
  -->
  match____option s' A (x => P x).

def option__rect :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  P :
    (o :
       cupicef.Term
         (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
         (option (cupicef.type (cupicef.s cupicef.z)) A) ->
     cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) ->
  f :
    (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P (Some A a))) ->
  f0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P (None A)) ->
  o :
    cupicef.Term
      (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
      (option (cupicef.type (cupicef.s cupicef.z)) A) ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P o)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   P :
     (o :
        cupicef.Term
          (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
          (option (cupicef.type (cupicef.s cupicef.z)) A) ->
      cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) =>
   f :
     (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P (Some A a))) =>
   f0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P (None A)) =>
   o :
     cupicef.Term
       (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
       (option (cupicef.type (cupicef.s cupicef.z)) A) =>
   match____option (cupicef.type (cupicef.s cupicef.z)) A
     (o0 :
        cupicef.Term
          (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
          (option (cupicef.type (cupicef.s cupicef.z)) A) =>
      P o0)
     f f0 o.

def option__ind :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  P :
    (o :
       cupicef.Term
         (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
         (option (cupicef.type (cupicef.s cupicef.z)) A) ->
     cupicef.Univ cupicef.prop) ->
  f :
    (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     cupicef.Term cupicef.prop (P (Some A a))) ->
  f0 : cupicef.Term cupicef.prop (P (None A)) ->
  o :
    cupicef.Term
      (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
      (option (cupicef.type (cupicef.s cupicef.z)) A) ->
  cupicef.Term cupicef.prop (P o)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   P :
     (o :
        cupicef.Term
          (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
          (option (cupicef.type (cupicef.s cupicef.z)) A) ->
      cupicef.Univ cupicef.prop) =>
   f :
     (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      cupicef.Term cupicef.prop (P (Some A a))) =>
   f0 : cupicef.Term cupicef.prop (P (None A)) =>
   o :
     cupicef.Term
       (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
       (option (cupicef.type (cupicef.s cupicef.z)) A) =>
   match____option cupicef.prop A
     (o0 :
        cupicef.Term
          (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
          (option (cupicef.type (cupicef.s cupicef.z)) A) =>
      P o0)
     f f0 o.

def option__rec :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  P :
    (o :
       cupicef.Term
         (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
         (option (cupicef.type (cupicef.s cupicef.z)) A) ->
     cupicef.Univ cupicef.set) ->
  f :
    (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     cupicef.Term cupicef.set (P (Some A a))) ->
  f0 : cupicef.Term cupicef.set (P (None A)) ->
  o :
    cupicef.Term
      (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
      (option (cupicef.type (cupicef.s cupicef.z)) A) ->
  cupicef.Term cupicef.set (P o)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   P :
     (o :
        cupicef.Term
          (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
          (option (cupicef.type (cupicef.s cupicef.z)) A) ->
      cupicef.Univ cupicef.set) =>
   option__rect A
     (cupicef.cast
        (cupicef.rule
           (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.type (cupicef.s cupicef.z)))
        (cupicef.rule
           (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
        (cupicef.prod
           (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule
              (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
              (cupicef.type (cupicef.s cupicef.z)))
           cupicef.I (option (cupicef.type (cupicef.s cupicef.z)) A)
           (o :
              cupicef.Term
                (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
                (option (cupicef.type (cupicef.s cupicef.z)) A) =>
            cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
              cupicef.I))
        (cupicef.prod
           (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.rule
              (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
           cupicef.I (option (cupicef.type (cupicef.s cupicef.z)) A)
           (o :
              cupicef.Term
                (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
                (option (cupicef.type (cupicef.s cupicef.z)) A) =>
            cupicef.univ (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))) cupicef.I))
        cupicef.I P).

def option__map :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  f :
    (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B) ->
  o :
    cupicef.Term
      (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
      (option (cupicef.type (cupicef.s cupicef.z)) A) ->
  cupicef.Term (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
    (option (cupicef.type (cupicef.s cupicef.z)) B)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   f :
     (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B) =>
   o :
     cupicef.Term
       (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
       (option (cupicef.type (cupicef.s cupicef.z)) A) =>
   match____option
     (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z))) A
     (o0 :
        cupicef.Term
          (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
          (option (cupicef.type (cupicef.s cupicef.z)) A) =>
      option (cupicef.type (cupicef.s cupicef.z)) B)
     (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A => Some B (f a))
     (None B) o.

def sum :
  Coq__Init__Datatypes__19 : cupicef.Sort ->
  Coq__Init__Datatypes__20 : cupicef.Sort ->
  A : cupicef.Univ Coq__Init__Datatypes__19 ->
  B : cupicef.Univ Coq__Init__Datatypes__20 ->
  cupicef.Univ
    (cupicef.sup cupicef.set
       (cupicef.sup Coq__Init__Datatypes__19 Coq__Init__Datatypes__20)).

sum' :
  A : cupicef.Univ cupicef.sinf ->
  B : cupicef.Univ cupicef.sinf ->
  cupicef.Univ cupicef.sinf.

[ Coq__Init__Datatypes__19, Coq__Init__Datatypes__20, A, B]
  cupicef.code (cupicef.cU _)
    (sum Coq__Init__Datatypes__19 Coq__Init__Datatypes__20 A B)
  -->
  sum' (cupicef.code (cupicef.cU Coq__Init__Datatypes__19) A)
    (cupicef.code (cupicef.cU Coq__Init__Datatypes__20) B).

def Coq__Init__Datatypes__19 :
  cupicef.Nat

:= cupicef.s cupicef.z.

def Coq__Init__Datatypes__20 :
  cupicef.Nat

:= cupicef.s cupicef.z.

def inl :
  A : cupicef.Univ (cupicef.type Coq__Init__Datatypes__19) ->
  B : cupicef.Univ (cupicef.type Coq__Init__Datatypes__20) ->
  __ : cupicef.Term (cupicef.type Coq__Init__Datatypes__19) A ->
  cupicef.Term
    (cupicef.sup cupicef.set
       (cupicef.sup (cupicef.type Coq__Init__Datatypes__19)
          (cupicef.type Coq__Init__Datatypes__20)))
    (sum (cupicef.type Coq__Init__Datatypes__19)
       (cupicef.type Coq__Init__Datatypes__20) A B).

def inr :
  A : cupicef.Univ (cupicef.type Coq__Init__Datatypes__19) ->
  B : cupicef.Univ (cupicef.type Coq__Init__Datatypes__20) ->
  __ : cupicef.Term (cupicef.type Coq__Init__Datatypes__20) B ->
  cupicef.Term
    (cupicef.sup cupicef.set
       (cupicef.sup (cupicef.type Coq__Init__Datatypes__19)
          (cupicef.type Coq__Init__Datatypes__20)))
    (sum (cupicef.type Coq__Init__Datatypes__19)
       (cupicef.type Coq__Init__Datatypes__20) A B).

[ ] cupicef.code_guarded? _ (inl _ _ _) --> cupicef.guarded.

[ ] cupicef.code_guarded? _ (inr _ _ _) --> cupicef.guarded.

def match____sum :
  s : cupicef.Sort ->
  A : cupicef.Univ (cupicef.type Coq__Init__Datatypes__19) ->
  B : cupicef.Univ (cupicef.type Coq__Init__Datatypes__20) ->
  P :
    (cupicef.Term
       (cupicef.sup cupicef.set
          (cupicef.sup (cupicef.type Coq__Init__Datatypes__19)
             (cupicef.type Coq__Init__Datatypes__20)))
       (sum (cupicef.type Coq__Init__Datatypes__19)
          (cupicef.type Coq__Init__Datatypes__20) A B) ->
     cupicef.Univ s) ->
  case__inl :
    (__ : cupicef.Term (cupicef.type Coq__Init__Datatypes__19) A ->
     cupicef.Term s (P (inl A B __))) ->
  case__inr :
    (__ : cupicef.Term (cupicef.type Coq__Init__Datatypes__20) B ->
     cupicef.Term s (P (inr A B __))) ->
  x :
    cupicef.Term
      (cupicef.sup cupicef.set
         (cupicef.sup (cupicef.type Coq__Init__Datatypes__19)
            (cupicef.type Coq__Init__Datatypes__20)))
      (sum (cupicef.type Coq__Init__Datatypes__19)
         (cupicef.type Coq__Init__Datatypes__20) A B) ->
  cupicef.Term s (P x).

[ s, A, B, P, case__inl, case__inr, __]
  match____sum s A B P case__inl case__inr (inl A B __)
  -->
  case__inl __.

[ s, A, B, P, case__inl, case__inr, __]
  match____sum s A B P case__inl case__inr (inr A B __)
  -->
  case__inr __.

[ s, A, B, P, s']
  match____sum s A B
    (x => cupicef.uncode _ (cupicef.code (cupicef.cU s') (P x)))
  -->
  match____sum s' A B (x => P x).

def sum__rect :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  P :
    (s :
       cupicef.Term
         (cupicef.sup cupicef.set
            (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
               (cupicef.type (cupicef.s cupicef.z))))
         (sum (cupicef.type (cupicef.s cupicef.z))
            (cupicef.type (cupicef.s cupicef.z)) A B) ->
     cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) ->
  f :
    (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P (inl A B a))) ->
  f0 :
    (b : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B ->
     cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P (inr A B b))) ->
  s :
    cupicef.Term
      (cupicef.sup cupicef.set
         (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
            (cupicef.type (cupicef.s cupicef.z))))
      (sum (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)) A B) ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P s)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   P :
     (s :
        cupicef.Term
          (cupicef.sup cupicef.set
             (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                (cupicef.type (cupicef.s cupicef.z))))
          (sum (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)) A B) ->
      cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) =>
   f :
     (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P (inl A B a))) =>
   f0 :
     (b : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B ->
      cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P (inr A B b))) =>
   s :
     cupicef.Term
       (cupicef.sup cupicef.set
          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z))))
       (sum (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)) A B) =>
   match____sum (cupicef.type (cupicef.s cupicef.z)) A B
     (s0 :
        cupicef.Term
          (cupicef.sup cupicef.set
             (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                (cupicef.type (cupicef.s cupicef.z))))
          (sum (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)) A B) =>
      P s0)
     f f0 s.

def sum__ind :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  P :
    (s :
       cupicef.Term
         (cupicef.sup cupicef.set
            (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
               (cupicef.type (cupicef.s cupicef.z))))
         (sum (cupicef.type (cupicef.s cupicef.z))
            (cupicef.type (cupicef.s cupicef.z)) A B) ->
     cupicef.Univ cupicef.prop) ->
  f :
    (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     cupicef.Term cupicef.prop (P (inl A B a))) ->
  f0 :
    (b : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B ->
     cupicef.Term cupicef.prop (P (inr A B b))) ->
  s :
    cupicef.Term
      (cupicef.sup cupicef.set
         (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
            (cupicef.type (cupicef.s cupicef.z))))
      (sum (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)) A B) ->
  cupicef.Term cupicef.prop (P s)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   P :
     (s :
        cupicef.Term
          (cupicef.sup cupicef.set
             (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                (cupicef.type (cupicef.s cupicef.z))))
          (sum (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)) A B) ->
      cupicef.Univ cupicef.prop) =>
   f :
     (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      cupicef.Term cupicef.prop (P (inl A B a))) =>
   f0 :
     (b : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B ->
      cupicef.Term cupicef.prop (P (inr A B b))) =>
   s :
     cupicef.Term
       (cupicef.sup cupicef.set
          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z))))
       (sum (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)) A B) =>
   match____sum cupicef.prop A B
     (s0 :
        cupicef.Term
          (cupicef.sup cupicef.set
             (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                (cupicef.type (cupicef.s cupicef.z))))
          (sum (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)) A B) =>
      P s0)
     f f0 s.

def sum__rec :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  P :
    (s :
       cupicef.Term
         (cupicef.sup cupicef.set
            (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
               (cupicef.type (cupicef.s cupicef.z))))
         (sum (cupicef.type (cupicef.s cupicef.z))
            (cupicef.type (cupicef.s cupicef.z)) A B) ->
     cupicef.Univ cupicef.set) ->
  f :
    (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     cupicef.Term cupicef.set (P (inl A B a))) ->
  f0 :
    (b : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B ->
     cupicef.Term cupicef.set (P (inr A B b))) ->
  s :
    cupicef.Term
      (cupicef.sup cupicef.set
         (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
            (cupicef.type (cupicef.s cupicef.z))))
      (sum (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)) A B) ->
  cupicef.Term cupicef.set (P s)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   P :
     (s :
        cupicef.Term
          (cupicef.sup cupicef.set
             (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                (cupicef.type (cupicef.s cupicef.z))))
          (sum (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)) A B) ->
      cupicef.Univ cupicef.set) =>
   sum__rect A B
     (cupicef.cast
        (cupicef.rule
           (cupicef.sup cupicef.set
              (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z))))
           (cupicef.type (cupicef.s cupicef.z)))
        (cupicef.rule
           (cupicef.sup cupicef.set
              (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z))))
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
        (cupicef.prod
           (cupicef.sup cupicef.set
              (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z))))
           (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule
              (cupicef.sup cupicef.set
                 (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))))
              (cupicef.type (cupicef.s cupicef.z)))
           cupicef.I
           (sum (cupicef.type (cupicef.s cupicef.z))
              (cupicef.type (cupicef.s cupicef.z)) A B)
           (s :
              cupicef.Term
                (cupicef.sup cupicef.set
                   (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                      (cupicef.type (cupicef.s cupicef.z))))
                (sum (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.type (cupicef.s cupicef.z)) A B) =>
            cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
              cupicef.I))
        (cupicef.prod
           (cupicef.sup cupicef.set
              (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z))))
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.rule
              (cupicef.sup cupicef.set
                 (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))))
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
           cupicef.I
           (sum (cupicef.type (cupicef.s cupicef.z))
              (cupicef.type (cupicef.s cupicef.z)) A B)
           (s :
              cupicef.Term
                (cupicef.sup cupicef.set
                   (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                      (cupicef.type (cupicef.s cupicef.z))))
                (sum (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.type (cupicef.s cupicef.z)) A B) =>
            cupicef.univ (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))) cupicef.I))
        cupicef.I P).

def prod :
  Coq__Init__Datatypes__23 : cupicef.Sort ->
  Coq__Init__Datatypes__24 : cupicef.Sort ->
  A : cupicef.Univ Coq__Init__Datatypes__23 ->
  B : cupicef.Univ Coq__Init__Datatypes__24 ->
  cupicef.Univ
    (cupicef.sup Coq__Init__Datatypes__23 Coq__Init__Datatypes__24).

prod' :
  A : cupicef.Univ cupicef.sinf ->
  B : cupicef.Univ cupicef.sinf ->
  cupicef.Univ cupicef.sinf.

[ Coq__Init__Datatypes__23, Coq__Init__Datatypes__24, A, B]
  cupicef.code (cupicef.cU _)
    (prod Coq__Init__Datatypes__23 Coq__Init__Datatypes__24 A B)
  -->
  prod' (cupicef.code (cupicef.cU Coq__Init__Datatypes__23) A)
    (cupicef.code (cupicef.cU Coq__Init__Datatypes__24) B).

def Coq__Init__Datatypes__23 :
  cupicef.Nat

:= cupicef.s cupicef.z.

def Coq__Init__Datatypes__24 :
  cupicef.Nat

:= cupicef.s cupicef.z.

def pair :
  A : cupicef.Univ (cupicef.type Coq__Init__Datatypes__23) ->
  B : cupicef.Univ (cupicef.type Coq__Init__Datatypes__24) ->
  __ : cupicef.Term (cupicef.type Coq__Init__Datatypes__23) A ->
  __0 : cupicef.Term (cupicef.type Coq__Init__Datatypes__24) B ->
  cupicef.Term
    (cupicef.sup (cupicef.type Coq__Init__Datatypes__23)
       (cupicef.type Coq__Init__Datatypes__24))
    (prod (cupicef.type Coq__Init__Datatypes__23)
       (cupicef.type Coq__Init__Datatypes__24) A B).

[ ] cupicef.code_guarded? _ (pair _ _ _ _) --> cupicef.guarded.

def match____prod :
  s : cupicef.Sort ->
  A : cupicef.Univ (cupicef.type Coq__Init__Datatypes__23) ->
  B : cupicef.Univ (cupicef.type Coq__Init__Datatypes__24) ->
  P :
    (cupicef.Term
       (cupicef.sup (cupicef.type Coq__Init__Datatypes__23)
          (cupicef.type Coq__Init__Datatypes__24))
       (prod (cupicef.type Coq__Init__Datatypes__23)
          (cupicef.type Coq__Init__Datatypes__24) A B) ->
     cupicef.Univ s) ->
  case__pair :
    (__ : cupicef.Term (cupicef.type Coq__Init__Datatypes__23) A ->
     __0 : cupicef.Term (cupicef.type Coq__Init__Datatypes__24) B ->
     cupicef.Term s (P (pair A B __ __0))) ->
  x :
    cupicef.Term
      (cupicef.sup (cupicef.type Coq__Init__Datatypes__23)
         (cupicef.type Coq__Init__Datatypes__24))
      (prod (cupicef.type Coq__Init__Datatypes__23)
         (cupicef.type Coq__Init__Datatypes__24) A B) ->
  cupicef.Term s (P x).

[ s, A, B, P, case__pair, __, __0]
  match____prod s A B P case__pair (pair A B __ __0)
  -->
  case__pair __ __0.

[ s, A, B, P, s']
  match____prod s A B
    (x => cupicef.uncode _ (cupicef.code (cupicef.cU s') (P x)))
  -->
  match____prod s' A B (x => P x).

def prod__rect :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  P :
    (p :
       cupicef.Term
         (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
            (cupicef.type (cupicef.s cupicef.z)))
         (prod (cupicef.type (cupicef.s cupicef.z))
            (cupicef.type (cupicef.s cupicef.z)) A B) ->
     cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) ->
  f :
    (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     b : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B ->
     cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P (pair A B a b))) ->
  p :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (prod (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)) A B) ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P p)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   P :
     (p :
        cupicef.Term
          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)))
          (prod (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)) A B) ->
      cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) =>
   f :
     (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      b : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B ->
      cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P (pair A B a b))) =>
   p :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (prod (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)) A B) =>
   match____prod (cupicef.type (cupicef.s cupicef.z)) A B
     (p0 :
        cupicef.Term
          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)))
          (prod (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)) A B) =>
      P p0)
     f p.

def prod__ind :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  P :
    (p :
       cupicef.Term
         (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
            (cupicef.type (cupicef.s cupicef.z)))
         (prod (cupicef.type (cupicef.s cupicef.z))
            (cupicef.type (cupicef.s cupicef.z)) A B) ->
     cupicef.Univ cupicef.prop) ->
  f :
    (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     b : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B ->
     cupicef.Term cupicef.prop (P (pair A B a b))) ->
  p :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (prod (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)) A B) ->
  cupicef.Term cupicef.prop (P p)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   P :
     (p :
        cupicef.Term
          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)))
          (prod (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)) A B) ->
      cupicef.Univ cupicef.prop) =>
   f :
     (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      b : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B ->
      cupicef.Term cupicef.prop (P (pair A B a b))) =>
   p :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (prod (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)) A B) =>
   match____prod cupicef.prop A B
     (p0 :
        cupicef.Term
          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)))
          (prod (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)) A B) =>
      P p0)
     f p.

def prod__rec :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  P :
    (p :
       cupicef.Term
         (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
            (cupicef.type (cupicef.s cupicef.z)))
         (prod (cupicef.type (cupicef.s cupicef.z))
            (cupicef.type (cupicef.s cupicef.z)) A B) ->
     cupicef.Univ cupicef.set) ->
  f :
    (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     b : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B ->
     cupicef.Term cupicef.set (P (pair A B a b))) ->
  p :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (prod (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)) A B) ->
  cupicef.Term cupicef.set (P p)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   P :
     (p :
        cupicef.Term
          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)))
          (prod (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)) A B) ->
      cupicef.Univ cupicef.set) =>
   prod__rect A B
     (cupicef.cast
        (cupicef.rule
           (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
              (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.type (cupicef.s cupicef.z)))
        (cupicef.rule
           (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
              (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
        (cupicef.prod
           (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
              (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule
              (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z)))
              (cupicef.type (cupicef.s cupicef.z)))
           cupicef.I
           (prod (cupicef.type (cupicef.s cupicef.z))
              (cupicef.type (cupicef.s cupicef.z)) A B)
           (p :
              cupicef.Term
                (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.type (cupicef.s cupicef.z)))
                (prod (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.type (cupicef.s cupicef.z)) A B) =>
            cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
              cupicef.I))
        (cupicef.prod
           (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
              (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.rule
              (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z)))
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
           cupicef.I
           (prod (cupicef.type (cupicef.s cupicef.z))
              (cupicef.type (cupicef.s cupicef.z)) A B)
           (p :
              cupicef.Term
                (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.type (cupicef.s cupicef.z)))
                (prod (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.type (cupicef.s cupicef.z)) A B) =>
            cupicef.univ (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))) cupicef.I))
        cupicef.I P).

def fst :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  p :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (prod (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)) A B) ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   p :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (prod (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)) A B) =>
   match____prod (cupicef.type (cupicef.s cupicef.z)) A B
     (p0 :
        cupicef.Term
          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)))
          (prod (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)) A B) =>
      A)
     (x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
      y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B =>
      x)
     p.

def snd :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  p :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (prod (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)) A B) ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   p :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (prod (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)) A B) =>
   match____prod (cupicef.type (cupicef.s cupicef.z)) A B
     (p0 :
        cupicef.Term
          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)))
          (prod (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)) A B) =>
      B)
     (x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
      y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B =>
      y)
     p.

thm surjective__pairing :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  p :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (prod (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)) A B) ->
  cupicef.Term cupicef.prop
    (Coq__Init__Logic.eq
       (cupicef.cast
          (cupicef.axiom
             (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                (cupicef.type (cupicef.s cupicef.z))))
          (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
          (cupicef.univ
             (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                (cupicef.type (cupicef.s cupicef.z)))
             (cupicef.axiom
                (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.type (cupicef.s cupicef.z))))
             cupicef.I)
          (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             cupicef.I)
          cupicef.I
          (prod (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)) A B))
       p (pair A B (fst A B p) (snd A B p)))

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   p :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (prod (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)) A B) =>
   match____prod cupicef.prop A B
     (p0 :
        cupicef.Term
          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)))
          (prod (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)) A B) =>
      Coq__Init__Logic.eq
        (cupicef.cast
           (cupicef.axiom
              (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z))))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           (cupicef.univ
              (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z)))
              (cupicef.axiom
                 (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))))
              cupicef.I)
           (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              cupicef.I)
           cupicef.I
           (prod (cupicef.type (cupicef.s cupicef.z))
              (cupicef.type (cupicef.s cupicef.z)) A B))
        p0 (pair A B (fst A B p0) (snd A B p0)))
     (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
      b : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B =>
      Coq__Init__Logic.eq__refl
        (cupicef.cast
           (cupicef.axiom
              (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z))))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           (cupicef.univ
              (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z)))
              (cupicef.axiom
                 (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))))
              cupicef.I)
           (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              cupicef.I)
           cupicef.I
           (prod (cupicef.type (cupicef.s cupicef.z))
              (cupicef.type (cupicef.s cupicef.z)) A B))
        (pair A B (fst A B (pair A B a b)) (snd A B (pair A B a b))))
     p.

thm injective__projections :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  p1 :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (prod (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)) A B) ->
  p2 :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (prod (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)) A B) ->
  __ :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
               (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))) cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I A)
         (fst A B p1) (fst A B p2)) ->
  __0 :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
               (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))) cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I B)
         (snd A B p1) (snd A B p2)) ->
  cupicef.Term cupicef.prop
    (Coq__Init__Logic.eq
       (cupicef.cast
          (cupicef.axiom
             (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                (cupicef.type (cupicef.s cupicef.z))))
          (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
          (cupicef.univ
             (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                (cupicef.type (cupicef.s cupicef.z)))
             (cupicef.axiom
                (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.type (cupicef.s cupicef.z))))
             cupicef.I)
          (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             cupicef.I)
          cupicef.I
          (prod (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)) A B))
       p1 p2)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   p1 :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (prod (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)) A B) =>
   match____prod cupicef.prop A B
     (p :
        cupicef.Term
          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)))
          (prod (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)) A B) =>
      cupicef.prod
        (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
           (cupicef.type (cupicef.s cupicef.z)))
        (cupicef.rule cupicef.prop (cupicef.rule cupicef.prop cupicef.prop))
        (cupicef.rule
           (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
              (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.rule cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop)))
        cupicef.I
        (prod (cupicef.type (cupicef.s cupicef.z))
           (cupicef.type (cupicef.s cupicef.z)) A B)
        (p2 :
           cupicef.Term
             (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                (cupicef.type (cupicef.s cupicef.z)))
             (prod (cupicef.type (cupicef.s cupicef.z))
                (cupicef.type (cupicef.s cupicef.z)) A B) =>
         cupicef.prod cupicef.prop (cupicef.rule cupicef.prop cupicef.prop)
           (cupicef.rule cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop))
           cupicef.I
           (Coq__Init__Logic.eq
              (cupicef.cast
                 (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                    cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I A)
              (fst A B p) (fst A B p2))
           (__ :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.eq
                   (cupicef.cast
                      (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                         cupicef.I)
                      (cupicef.univ
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         cupicef.I)
                      cupicef.I A)
                   (fst A B p) (fst A B p2)) =>
            cupicef.prod cupicef.prop cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
              (Coq__Init__Logic.eq
                 (cupicef.cast
                    (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                       cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I B)
                 (snd A B p) (snd A B p2))
              (__0 :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.eq
                      (cupicef.cast
                         (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type (cupicef.s cupicef.z)))
                            cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I B)
                      (snd A B p) (snd A B p2)) =>
               Coq__Init__Logic.eq
                 (cupicef.cast
                    (cupicef.axiom
                       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                          (cupicef.type (cupicef.s cupicef.z))))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ
                       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                          (cupicef.type (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                             (cupicef.type (cupicef.s cupicef.z))))
                       cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I
                    (prod (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.type (cupicef.s cupicef.z)) A B))
                 p p2))))
     (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
      b : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B =>
      p2 :
        cupicef.Term
          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)))
          (prod (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)) A B) =>
      match____prod cupicef.prop A B
        (p :
           cupicef.Term
             (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                (cupicef.type (cupicef.s cupicef.z)))
             (prod (cupicef.type (cupicef.s cupicef.z))
                (cupicef.type (cupicef.s cupicef.z)) A B) =>
         cupicef.prod cupicef.prop (cupicef.rule cupicef.prop cupicef.prop)
           (cupicef.rule cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop))
           cupicef.I
           (Coq__Init__Logic.eq
              (cupicef.cast
                 (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                    cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I A)
              (fst A B (pair A B a b)) (fst A B p))
           (__ :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.eq
                   (cupicef.cast
                      (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                         cupicef.I)
                      (cupicef.univ
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         cupicef.I)
                      cupicef.I A)
                   (fst A B (pair A B a b)) (fst A B p)) =>
            cupicef.prod cupicef.prop cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
              (Coq__Init__Logic.eq
                 (cupicef.cast
                    (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                       cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I B)
                 (snd A B (pair A B a b)) (snd A B p))
              (__0 :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.eq
                      (cupicef.cast
                         (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type (cupicef.s cupicef.z)))
                            cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I B)
                      (snd A B (pair A B a b)) (snd A B p)) =>
               Coq__Init__Logic.eq
                 (cupicef.cast
                    (cupicef.axiom
                       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                          (cupicef.type (cupicef.s cupicef.z))))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ
                       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                          (cupicef.type (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                             (cupicef.type (cupicef.s cupicef.z))))
                       cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I
                    (prod (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.type (cupicef.s cupicef.z)) A B))
                 (pair A B a b) p)))
        (a0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
         b0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B =>
         cupicef.cast
           (cupicef.rule cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop))
           (cupicef.rule cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop))
           (cupicef.prod cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop)
              (cupicef.rule cupicef.prop
                 (cupicef.rule cupicef.prop cupicef.prop))
              cupicef.I
              (Coq__Init__Logic.eq
                 (cupicef.cast
                    (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                       cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I A)
                 a a0)
              (Hfst :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.eq
                      (cupicef.cast
                         (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type (cupicef.s cupicef.z)))
                            cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I A)
                      a a0) =>
               cupicef.prod cupicef.prop cupicef.prop
                 (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
                 (Coq__Init__Logic.eq
                    (cupicef.cast
                       (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                          (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                          cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I B)
                    b b0)
                 (Hsnd :
                    cupicef.Term cupicef.prop
                      (Coq__Init__Logic.eq
                         (cupicef.cast
                            (cupicef.axiom
                               (cupicef.type (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ
                               (cupicef.type (cupicef.s cupicef.z))
                               (cupicef.axiom
                                  (cupicef.type (cupicef.s cupicef.z)))
                               cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I B)
                         b b0) =>
                  (a1 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
                   Coq__Init__Logic.eq
                     (cupicef.cast
                        (cupicef.axiom
                           (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                              (cupicef.type (cupicef.s cupicef.z))))
                        (cupicef.axiom
                           (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                        (cupicef.univ
                           (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                              (cupicef.type (cupicef.s cupicef.z)))
                           (cupicef.axiom
                              (cupicef.sup
                                 (cupicef.type (cupicef.s cupicef.z))
                                 (cupicef.type (cupicef.s cupicef.z))))
                           cupicef.I)
                        (cupicef.univ
                           (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                           (cupicef.axiom
                              (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                           cupicef.I)
                        cupicef.I
                        (prod (cupicef.type (cupicef.s cupicef.z))
                           (cupicef.type (cupicef.s cupicef.z)) A B))
                     (pair A B a1 b) (pair A B a0 b0))
                    a)))
           (cupicef.prod cupicef.prop
              (cupicef.rule cupicef.prop cupicef.prop)
              (cupicef.rule cupicef.prop
                 (cupicef.rule cupicef.prop cupicef.prop))
              cupicef.I
              (Coq__Init__Logic.eq
                 (cupicef.cast
                    (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                       cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I A)
                 (fst A B (pair A B a b)) (fst A B (pair A B a0 b0)))
              (__ :
                 cupicef.Term cupicef.prop
                   (Coq__Init__Logic.eq
                      (cupicef.cast
                         (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type (cupicef.s cupicef.z)))
                            cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I A)
                      (fst A B (pair A B a b)) (fst A B (pair A B a0 b0))) =>
               cupicef.prod cupicef.prop cupicef.prop
                 (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
                 (Coq__Init__Logic.eq
                    (cupicef.cast
                       (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                          (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                          cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I B)
                    (snd A B (pair A B a b)) (snd A B (pair A B a0 b0)))
                 (__0 :
                    cupicef.Term cupicef.prop
                      (Coq__Init__Logic.eq
                         (cupicef.cast
                            (cupicef.axiom
                               (cupicef.type (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ
                               (cupicef.type (cupicef.s cupicef.z))
                               (cupicef.axiom
                                  (cupicef.type (cupicef.s cupicef.z)))
                               cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I B)
                         (snd A B (pair A B a b)) (snd A B (pair A B a0 b0))) =>
                  Coq__Init__Logic.eq
                    (cupicef.cast
                       (cupicef.axiom
                          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                             (cupicef.type (cupicef.s cupicef.z))))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ
                          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                             (cupicef.type (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.sup
                                (cupicef.type (cupicef.s cupicef.z))
                                (cupicef.type (cupicef.s cupicef.z))))
                          cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I
                       (prod (cupicef.type (cupicef.s cupicef.z))
                          (cupicef.type (cupicef.s cupicef.z)) A B))
                    (pair A B a b) (pair A B a0 b0))))
           cupicef.I
           (Hfst :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.eq
                   (cupicef.cast
                      (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                         cupicef.I)
                      (cupicef.univ
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         cupicef.I)
                      cupicef.I A)
                   a a0) =>
            Hsnd :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.eq
                   (cupicef.cast
                      (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                         cupicef.I)
                      (cupicef.univ
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         cupicef.I)
                      cupicef.I B)
                   b b0) =>
            Coq__Init__Logic.eq__ind__r A a0
              (a1 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
               Coq__Init__Logic.eq
                 (cupicef.cast
                    (cupicef.axiom
                       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                          (cupicef.type (cupicef.s cupicef.z))))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    (cupicef.univ
                       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                          (cupicef.type (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                             (cupicef.type (cupicef.s cupicef.z))))
                       cupicef.I)
                    (cupicef.univ
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       cupicef.I)
                    cupicef.I
                    (prod (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.type (cupicef.s cupicef.z)) A B))
                 (pair A B a1 b) (pair A B a0 b0))
              (Coq__Init__Logic.eq__ind__r B b0
                 (b1 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B =>
                  Coq__Init__Logic.eq
                    (cupicef.cast
                       (cupicef.axiom
                          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                             (cupicef.type (cupicef.s cupicef.z))))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ
                          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                             (cupicef.type (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.sup
                                (cupicef.type (cupicef.s cupicef.z))
                                (cupicef.type (cupicef.s cupicef.z))))
                          cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I
                       (prod (cupicef.type (cupicef.s cupicef.z))
                          (cupicef.type (cupicef.s cupicef.z)) A B))
                    (pair A B a0 b1) (pair A B a0 b0))
                 (Coq__Init__Logic.eq__refl
                    (cupicef.cast
                       (cupicef.axiom
                          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                             (cupicef.type (cupicef.s cupicef.z))))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ
                          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                             (cupicef.type (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.sup
                                (cupicef.type (cupicef.s cupicef.z))
                                (cupicef.type (cupicef.s cupicef.z))))
                          cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I
                       (prod (cupicef.type (cupicef.s cupicef.z))
                          (cupicef.type (cupicef.s cupicef.z)) A B))
                    (pair A B a0 b0))
                 b Hsnd)
              a Hfst))
        p2)
     p1.

def prod__uncurry :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  C : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  f :
    (__ :
       cupicef.Term
         (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
            (cupicef.type (cupicef.s cupicef.z)))
         (prod (cupicef.type (cupicef.s cupicef.z))
            (cupicef.type (cupicef.s cupicef.z)) A B) ->
     cupicef.Term (cupicef.type (cupicef.s cupicef.z)) C) ->
  x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
  y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) C

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   C : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   f :
     (__ :
        cupicef.Term
          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)))
          (prod (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)) A B) ->
      cupicef.Term (cupicef.type (cupicef.s cupicef.z)) C) =>
   x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
   y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B =>
   f (pair A B x y).

def prod__curry :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  C : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  f :
    (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B ->
     cupicef.Term (cupicef.type (cupicef.s cupicef.z)) C) ->
  p :
    cupicef.Term
      (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)))
      (prod (cupicef.type (cupicef.s cupicef.z))
         (cupicef.type (cupicef.s cupicef.z)) A B) ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) C

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   B : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   C : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   f :
     (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B ->
      cupicef.Term (cupicef.type (cupicef.s cupicef.z)) C) =>
   p :
     cupicef.Term
       (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)))
       (prod (cupicef.type (cupicef.s cupicef.z))
          (cupicef.type (cupicef.s cupicef.z)) A B) =>
   match____prod (cupicef.type (cupicef.s cupicef.z)) A B
     (p0 :
        cupicef.Term
          (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)))
          (prod (cupicef.type (cupicef.s cupicef.z))
             (cupicef.type (cupicef.s cupicef.z)) A B) =>
      C)
     (x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
      y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) B =>
      f x y)
     p.

def list :
  Coq__Init__Datatypes__44 : cupicef.Sort ->
  A : cupicef.Univ Coq__Init__Datatypes__44 ->
  cupicef.Univ (cupicef.sup cupicef.set Coq__Init__Datatypes__44).

list' :
  A : cupicef.Univ cupicef.sinf -> cupicef.Univ cupicef.sinf.

[ Coq__Init__Datatypes__44, A]
  cupicef.code (cupicef.cU _) (list Coq__Init__Datatypes__44 A)
  -->
  list' (cupicef.code (cupicef.cU Coq__Init__Datatypes__44) A).

def Coq__Init__Datatypes__44 :
  cupicef.Nat

:= cupicef.s cupicef.z.

def nil :
  A : cupicef.Univ (cupicef.type Coq__Init__Datatypes__44) ->
  cupicef.Term
    (cupicef.sup cupicef.set (cupicef.type Coq__Init__Datatypes__44))
    (list (cupicef.type Coq__Init__Datatypes__44) A).

def cons :
  A : cupicef.Univ (cupicef.type Coq__Init__Datatypes__44) ->
  __ : cupicef.Term (cupicef.type Coq__Init__Datatypes__44) A ->
  __0 :
    cupicef.Term
      (cupicef.sup cupicef.set (cupicef.type Coq__Init__Datatypes__44))
      (list (cupicef.type Coq__Init__Datatypes__44) A) ->
  cupicef.Term
    (cupicef.sup cupicef.set (cupicef.type Coq__Init__Datatypes__44))
    (list (cupicef.type Coq__Init__Datatypes__44) A).

[ ] cupicef.code_guarded? _ (nil _) --> cupicef.guarded.

[ ] cupicef.code_guarded? _ (cons _ _ _) --> cupicef.guarded.

def match____list :
  s : cupicef.Sort ->
  A : cupicef.Univ (cupicef.type Coq__Init__Datatypes__44) ->
  P :
    (cupicef.Term
       (cupicef.sup cupicef.set (cupicef.type Coq__Init__Datatypes__44))
       (list (cupicef.type Coq__Init__Datatypes__44) A) ->
     cupicef.Univ s) ->
  case__nil : cupicef.Term s (P (nil A)) ->
  case__cons :
    (__ : cupicef.Term (cupicef.type Coq__Init__Datatypes__44) A ->
     __0 :
       cupicef.Term
         (cupicef.sup cupicef.set (cupicef.type Coq__Init__Datatypes__44))
         (list (cupicef.type Coq__Init__Datatypes__44) A) ->
     cupicef.Term s (P (cons A __ __0))) ->
  x :
    cupicef.Term
      (cupicef.sup cupicef.set (cupicef.type Coq__Init__Datatypes__44))
      (list (cupicef.type Coq__Init__Datatypes__44) A) ->
  cupicef.Term s (P x).

[ s, A, P, case__nil, case__cons]
  match____list s A P case__nil case__cons (nil A)
  -->
  case__nil.

[ s, A, P, case__nil, case__cons, __, __0]
  match____list s A P case__nil case__cons (cons A __ __0)
  -->
  case__cons __ __0.

[ s, A, P, s']
  match____list s A
    (x => cupicef.uncode _ (cupicef.code (cupicef.cU s') (P x)))
  -->
  match____list s' A (x => P x).

def list__rect :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  P :
    (l :
       cupicef.Term
         (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
         (list (cupicef.type (cupicef.s cupicef.z)) A) ->
     cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) ->
  f : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P (nil A)) ->
  f0 :
    (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     l :
       cupicef.Term
         (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
         (list (cupicef.type (cupicef.s cupicef.z)) A) ->
     __ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P l) ->
     cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P (cons A a l))) ->
  l :
    cupicef.Term
      (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
      (list (cupicef.type (cupicef.s cupicef.z)) A) ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P l)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   P :
     (l :
        cupicef.Term
          (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
          (list (cupicef.type (cupicef.s cupicef.z)) A) ->
      cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) =>
   f : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P (nil A)) =>
   f0 :
     (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      l :
        cupicef.Term
          (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
          (list (cupicef.type (cupicef.s cupicef.z)) A) ->
      __ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P l) ->
      cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P (cons A a l))) =>
   cupicef.fixproj cupicef.1
     (c =>
      c
        (cupicef.SA cupicef.0
           (cupicef.sup cupicef.set
              (cupicef.sup (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z))))
           (cupicef.prod
              (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
              (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule
                 (cupicef.sup cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)))
                 (cupicef.type (cupicef.s cupicef.z)))
              cupicef.I (list (cupicef.type (cupicef.s cupicef.z)) A)
              (l :
                 cupicef.Term
                   (cupicef.sup cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)))
                   (list (cupicef.type (cupicef.s cupicef.z)) A) =>
               P l))))
     (c =>
      c
        (F =>
         l :
           cupicef.Term
             (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
             (list (cupicef.type (cupicef.s cupicef.z)) A) =>
         match____list (cupicef.type (cupicef.s cupicef.z)) A
           (l0 :
              cupicef.Term
                (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
                (list (cupicef.type (cupicef.s cupicef.z)) A) =>
            P l0)
           f
           (y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
            l0 :
              cupicef.Term
                (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
                (list (cupicef.type (cupicef.s cupicef.z)) A) =>
            f0 y l0 (F l0))
           l))
     cupicef.0.

def list__ind :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  P :
    (l :
       cupicef.Term
         (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
         (list (cupicef.type (cupicef.s cupicef.z)) A) ->
     cupicef.Univ cupicef.prop) ->
  f : cupicef.Term cupicef.prop (P (nil A)) ->
  f0 :
    (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     l :
       cupicef.Term
         (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
         (list (cupicef.type (cupicef.s cupicef.z)) A) ->
     __ : cupicef.Term cupicef.prop (P l) ->
     cupicef.Term cupicef.prop (P (cons A a l))) ->
  l :
    cupicef.Term
      (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
      (list (cupicef.type (cupicef.s cupicef.z)) A) ->
  cupicef.Term cupicef.prop (P l)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   P :
     (l :
        cupicef.Term
          (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
          (list (cupicef.type (cupicef.s cupicef.z)) A) ->
      cupicef.Univ cupicef.prop) =>
   f : cupicef.Term cupicef.prop (P (nil A)) =>
   f0 :
     (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      l :
        cupicef.Term
          (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
          (list (cupicef.type (cupicef.s cupicef.z)) A) ->
      __ : cupicef.Term cupicef.prop (P l) ->
      cupicef.Term cupicef.prop (P (cons A a l))) =>
   cupicef.fixproj cupicef.1
     (c =>
      c
        (cupicef.SA cupicef.0 cupicef.prop
           (cupicef.prod
              (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
              cupicef.prop
              (cupicef.rule
                 (cupicef.sup cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)))
                 cupicef.prop)
              cupicef.I (list (cupicef.type (cupicef.s cupicef.z)) A)
              (l :
                 cupicef.Term
                   (cupicef.sup cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)))
                   (list (cupicef.type (cupicef.s cupicef.z)) A) =>
               P l))))
     (c =>
      c
        (F =>
         l :
           cupicef.Term
             (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
             (list (cupicef.type (cupicef.s cupicef.z)) A) =>
         match____list cupicef.prop A
           (l0 :
              cupicef.Term
                (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
                (list (cupicef.type (cupicef.s cupicef.z)) A) =>
            P l0)
           f
           (y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
            l0 :
              cupicef.Term
                (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
                (list (cupicef.type (cupicef.s cupicef.z)) A) =>
            f0 y l0 (F l0))
           l))
     cupicef.0.

def list__rec :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  P :
    (l :
       cupicef.Term
         (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
         (list (cupicef.type (cupicef.s cupicef.z)) A) ->
     cupicef.Univ cupicef.set) ->
  f : cupicef.Term cupicef.set (P (nil A)) ->
  f0 :
    (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     l :
       cupicef.Term
         (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
         (list (cupicef.type (cupicef.s cupicef.z)) A) ->
     __ : cupicef.Term cupicef.set (P l) ->
     cupicef.Term cupicef.set (P (cons A a l))) ->
  l :
    cupicef.Term
      (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
      (list (cupicef.type (cupicef.s cupicef.z)) A) ->
  cupicef.Term cupicef.set (P l)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   P :
     (l :
        cupicef.Term
          (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
          (list (cupicef.type (cupicef.s cupicef.z)) A) ->
      cupicef.Univ cupicef.set) =>
   list__rect A
     (cupicef.cast
        (cupicef.rule
           (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.type (cupicef.s cupicef.z)))
        (cupicef.rule
           (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
        (cupicef.prod
           (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule
              (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
              (cupicef.type (cupicef.s cupicef.z)))
           cupicef.I (list (cupicef.type (cupicef.s cupicef.z)) A)
           (l :
              cupicef.Term
                (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
                (list (cupicef.type (cupicef.s cupicef.z)) A) =>
            cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
              cupicef.I))
        (cupicef.prod
           (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.rule
              (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
           cupicef.I (list (cupicef.type (cupicef.s cupicef.z)) A)
           (l :
              cupicef.Term
                (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
                (list (cupicef.type (cupicef.s cupicef.z)) A) =>
            cupicef.univ (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))) cupicef.I))
        cupicef.I P).

def length :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  __ :
    cupicef.Term
      (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
      (list (cupicef.type (cupicef.s cupicef.z)) A) ->
  cupicef.Term cupicef.set nat

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   cupicef.fixproj cupicef.1
     (c =>
      c
        (cupicef.SA cupicef.0
           (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.prod
              (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
              cupicef.set
              (cupicef.rule
                 (cupicef.sup cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)))
                 cupicef.set)
              cupicef.I (list (cupicef.type (cupicef.s cupicef.z)) A)
              (l :
                 cupicef.Term
                   (cupicef.sup cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)))
                   (list (cupicef.type (cupicef.s cupicef.z)) A) =>
               nat))))
     (c =>
      c
        (length0 =>
         l :
           cupicef.Term
             (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
             (list (cupicef.type (cupicef.s cupicef.z)) A) =>
         match____list cupicef.set A
           (l0 :
              cupicef.Term
                (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
                (list (cupicef.type (cupicef.s cupicef.z)) A) =>
            nat)
           O
           (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
            l_27_ :
              cupicef.Term
                (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
                (list (cupicef.type (cupicef.s cupicef.z)) A) =>
            S (length0 l_27_))
           l))
     cupicef.0.

def app :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  __ :
    cupicef.Term
      (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
      (list (cupicef.type (cupicef.s cupicef.z)) A) ->
  __0 :
    cupicef.Term
      (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
      (list (cupicef.type (cupicef.s cupicef.z)) A) ->
  cupicef.Term (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
    (list (cupicef.type (cupicef.s cupicef.z)) A)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   cupicef.fixproj cupicef.1
     (c =>
      c
        (cupicef.SA cupicef.0
           (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.prod
              (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
              (cupicef.rule
                 (cupicef.sup cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)))
                 (cupicef.sup cupicef.set
                    (cupicef.type (cupicef.s cupicef.z))))
              (cupicef.rule
                 (cupicef.sup cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)))
                 (cupicef.rule
                    (cupicef.sup cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)))
                    (cupicef.sup cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)))))
              cupicef.I (list (cupicef.type (cupicef.s cupicef.z)) A)
              (l :
                 cupicef.Term
                   (cupicef.sup cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)))
                   (list (cupicef.type (cupicef.s cupicef.z)) A) =>
               cupicef.prod
                 (cupicef.sup cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)))
                 (cupicef.sup cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)))
                 (cupicef.rule
                    (cupicef.sup cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)))
                    (cupicef.sup cupicef.set
                       (cupicef.type (cupicef.s cupicef.z))))
                 cupicef.I (list (cupicef.type (cupicef.s cupicef.z)) A)
                 (m :
                    cupicef.Term
                      (cupicef.sup cupicef.set
                         (cupicef.type (cupicef.s cupicef.z)))
                      (list (cupicef.type (cupicef.s cupicef.z)) A) =>
                  list (cupicef.type (cupicef.s cupicef.z)) A)))))
     (c =>
      c
        (app0 =>
         l :
           cupicef.Term
             (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
             (list (cupicef.type (cupicef.s cupicef.z)) A) =>
         m :
           cupicef.Term
             (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
             (list (cupicef.type (cupicef.s cupicef.z)) A) =>
         match____list
           (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z))) A
           (l0 :
              cupicef.Term
                (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
                (list (cupicef.type (cupicef.s cupicef.z)) A) =>
            list (cupicef.type (cupicef.s cupicef.z)) A)
           m
           (a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
            l1 :
              cupicef.Term
                (cupicef.sup cupicef.set (cupicef.type (cupicef.s cupicef.z)))
                (list (cupicef.type (cupicef.s cupicef.z)) A) =>
            cons A a (app0 l1 m))
           l))
     cupicef.0.

def comparison :
  cupicef.Univ cupicef.set.

def Eq :
  cupicef.Term cupicef.set comparison.

def Lt :
  cupicef.Term cupicef.set comparison.

def Gt :
  cupicef.Term cupicef.set comparison.

[ ] cupicef.code_guarded? _ Eq --> cupicef.guarded.

[ ] cupicef.code_guarded? _ Lt --> cupicef.guarded.

[ ] cupicef.code_guarded? _ Gt --> cupicef.guarded.

def match____comparison :
  s : cupicef.Sort ->
  P : (cupicef.Term cupicef.set comparison -> cupicef.Univ s) ->
  case__Eq : cupicef.Term s (P Eq) ->
  case__Lt : cupicef.Term s (P Lt) ->
  case__Gt : cupicef.Term s (P Gt) ->
  x : cupicef.Term cupicef.set comparison ->
  cupicef.Term s (P x).

[ s, P, case__Eq, case__Lt, case__Gt]
  match____comparison s P case__Eq case__Lt case__Gt Eq
  -->
  case__Eq.

[ s, P, case__Eq, case__Lt, case__Gt]
  match____comparison s P case__Eq case__Lt case__Gt Lt
  -->
  case__Lt.

[ s, P, case__Eq, case__Lt, case__Gt]
  match____comparison s P case__Eq case__Lt case__Gt Gt
  -->
  case__Gt.

[ s, P, s']
  match____comparison s
    (x => cupicef.uncode _ (cupicef.code (cupicef.cU s') (P x)))
  -->
  match____comparison s' (x => P x).

def comparison__rect :
  P :
    (c : cupicef.Term cupicef.set comparison ->
     cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) ->
  f : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P Eq) ->
  f0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P Lt) ->
  f1 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P Gt) ->
  c : cupicef.Term cupicef.set comparison ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P c)

:= P :
     (c : cupicef.Term cupicef.set comparison ->
      cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) =>
   f : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P Eq) =>
   f0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P Lt) =>
   f1 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P Gt) =>
   c : cupicef.Term cupicef.set comparison =>
   match____comparison (cupicef.type (cupicef.s cupicef.z))
     (c0 : cupicef.Term cupicef.set comparison => P c0) f f0 f1 c.

def comparison__ind :
  P : (c : cupicef.Term cupicef.set comparison -> cupicef.Univ cupicef.prop) ->
  f : cupicef.Term cupicef.prop (P Eq) ->
  f0 : cupicef.Term cupicef.prop (P Lt) ->
  f1 : cupicef.Term cupicef.prop (P Gt) ->
  c : cupicef.Term cupicef.set comparison ->
  cupicef.Term cupicef.prop (P c)

:= P : (c : cupicef.Term cupicef.set comparison -> cupicef.Univ cupicef.prop) =>
   f : cupicef.Term cupicef.prop (P Eq) =>
   f0 : cupicef.Term cupicef.prop (P Lt) =>
   f1 : cupicef.Term cupicef.prop (P Gt) =>
   c : cupicef.Term cupicef.set comparison =>
   match____comparison cupicef.prop
     (c0 : cupicef.Term cupicef.set comparison => P c0) f f0 f1 c.

def comparison__rec :
  P : (c : cupicef.Term cupicef.set comparison -> cupicef.Univ cupicef.set) ->
  f : cupicef.Term cupicef.set (P Eq) ->
  f0 : cupicef.Term cupicef.set (P Lt) ->
  f1 : cupicef.Term cupicef.set (P Gt) ->
  c : cupicef.Term cupicef.set comparison ->
  cupicef.Term cupicef.set (P c)

:= P : (c : cupicef.Term cupicef.set comparison -> cupicef.Univ cupicef.set) =>
   comparison__rect
     (cupicef.cast
        (cupicef.rule cupicef.set (cupicef.type (cupicef.s cupicef.z)))
        (cupicef.rule cupicef.set
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
        (cupicef.prod cupicef.set (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.set (cupicef.type (cupicef.s cupicef.z)))
           cupicef.I comparison
           (c : cupicef.Term cupicef.set comparison =>
            cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
              cupicef.I))
        (cupicef.prod cupicef.set
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.rule cupicef.set
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
           cupicef.I comparison
           (c : cupicef.Term cupicef.set comparison =>
            cupicef.univ (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))) cupicef.I))
        cupicef.I P).

def let__H0 :
  c : cupicef.Term cupicef.set comparison ->
  c_27_ : cupicef.Term cupicef.set comparison ->
  H :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.not
         (Coq__Init__Logic.not
            (Coq__Init__Logic.eq
               (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                  (cupicef.axiom
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                  (cupicef.univ cupicef.set
                     (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                  (cupicef.univ
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                     (cupicef.axiom
                        (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                     cupicef.I)
                  cupicef.I comparison)
               Eq Lt))) ->
  H0 :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Eq Lt) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= c : cupicef.Term cupicef.set comparison =>
   c_27_ : cupicef.Term cupicef.set comparison =>
   H :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.not
          (Coq__Init__Logic.not
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                Eq Lt))) =>
   H0 :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          Eq Lt) =>
   Coq__Init__Logic.eq__ind
     (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
        (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
        (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           cupicef.I)
        cupicef.I comparison)
     Eq
     (e : cupicef.Term cupicef.set comparison =>
      match____comparison (cupicef.type (cupicef.s cupicef.z))
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.univ cupicef.prop (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        Coq__Init__Logic.True Coq__Init__Logic.False Coq__Init__Logic.False e)
     Coq__Init__Logic.I Lt H0.

def let__n :
  c : cupicef.Term cupicef.set comparison ->
  c_27_ : cupicef.Term cupicef.set comparison ->
  H :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.not
         (Coq__Init__Logic.not
            (Coq__Init__Logic.eq
               (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                  (cupicef.axiom
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                  (cupicef.univ cupicef.set
                     (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                  (cupicef.univ
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                     (cupicef.axiom
                        (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                     cupicef.I)
                  cupicef.I comparison)
               Eq Lt))) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= c : cupicef.Term cupicef.set comparison =>
   c_27_ : cupicef.Term cupicef.set comparison =>
   H :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.not
          (Coq__Init__Logic.not
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                Eq Lt))) =>
   H
     (cupicef.cast (cupicef.rule cupicef.prop cupicef.prop) cupicef.prop
        (cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Eq Lt)
           (H0 :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.eq
                   (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      (cupicef.univ cupicef.set
                         (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                      (cupicef.univ
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         cupicef.I)
                      cupicef.I comparison)
                   Eq Lt) =>
            Coq__Init__Logic.False))
        (Coq__Init__Logic.not
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Eq Lt))
        cupicef.I
        (H0 :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                Eq Lt) =>
         Coq__Init__Logic.False__ind Coq__Init__Logic.False
           (let__H0 c c_27_ H H0))).

def let__H1 :
  c : cupicef.Term cupicef.set comparison ->
  c_27_ : cupicef.Term cupicef.set comparison ->
  H :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.not
         (Coq__Init__Logic.not
            (Coq__Init__Logic.eq
               (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                  (cupicef.axiom
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                  (cupicef.univ cupicef.set
                     (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                  (cupicef.univ
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                     (cupicef.axiom
                        (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                     cupicef.I)
                  cupicef.I comparison)
               Eq Gt))) ->
  H0 :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Eq Gt) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= c : cupicef.Term cupicef.set comparison =>
   c_27_ : cupicef.Term cupicef.set comparison =>
   H :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.not
          (Coq__Init__Logic.not
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                Eq Gt))) =>
   H0 :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          Eq Gt) =>
   Coq__Init__Logic.eq__ind
     (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
        (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
        (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           cupicef.I)
        cupicef.I comparison)
     Eq
     (e : cupicef.Term cupicef.set comparison =>
      match____comparison (cupicef.type (cupicef.s cupicef.z))
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.univ cupicef.prop (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        Coq__Init__Logic.True Coq__Init__Logic.False Coq__Init__Logic.False e)
     Coq__Init__Logic.I Gt H0.

def let__n0 :
  c : cupicef.Term cupicef.set comparison ->
  c_27_ : cupicef.Term cupicef.set comparison ->
  H :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.not
         (Coq__Init__Logic.not
            (Coq__Init__Logic.eq
               (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                  (cupicef.axiom
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                  (cupicef.univ cupicef.set
                     (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                  (cupicef.univ
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                     (cupicef.axiom
                        (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                     cupicef.I)
                  cupicef.I comparison)
               Eq Gt))) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= c : cupicef.Term cupicef.set comparison =>
   c_27_ : cupicef.Term cupicef.set comparison =>
   H :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.not
          (Coq__Init__Logic.not
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                Eq Gt))) =>
   H
     (cupicef.cast (cupicef.rule cupicef.prop cupicef.prop) cupicef.prop
        (cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Eq Gt)
           (H0 :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.eq
                   (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      (cupicef.univ cupicef.set
                         (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                      (cupicef.univ
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         cupicef.I)
                      cupicef.I comparison)
                   Eq Gt) =>
            Coq__Init__Logic.False))
        (Coq__Init__Logic.not
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Eq Gt))
        cupicef.I
        (H0 :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                Eq Gt) =>
         Coq__Init__Logic.False__ind Coq__Init__Logic.False
           (let__H1 c c_27_ H H0))).

def let__H2 :
  c : cupicef.Term cupicef.set comparison ->
  c_27_ : cupicef.Term cupicef.set comparison ->
  H :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.not
         (Coq__Init__Logic.not
            (Coq__Init__Logic.eq
               (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                  (cupicef.axiom
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                  (cupicef.univ cupicef.set
                     (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                  (cupicef.univ
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                     (cupicef.axiom
                        (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                     cupicef.I)
                  cupicef.I comparison)
               Lt Eq))) ->
  H0 :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Lt Eq) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= c : cupicef.Term cupicef.set comparison =>
   c_27_ : cupicef.Term cupicef.set comparison =>
   H :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.not
          (Coq__Init__Logic.not
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                Lt Eq))) =>
   H0 :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          Lt Eq) =>
   Coq__Init__Logic.eq__ind
     (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
        (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
        (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           cupicef.I)
        cupicef.I comparison)
     Lt
     (e : cupicef.Term cupicef.set comparison =>
      match____comparison (cupicef.type (cupicef.s cupicef.z))
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.univ cupicef.prop (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        Coq__Init__Logic.False Coq__Init__Logic.True Coq__Init__Logic.False e)
     Coq__Init__Logic.I Eq H0.

def let__n1 :
  c : cupicef.Term cupicef.set comparison ->
  c_27_ : cupicef.Term cupicef.set comparison ->
  H :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.not
         (Coq__Init__Logic.not
            (Coq__Init__Logic.eq
               (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                  (cupicef.axiom
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                  (cupicef.univ cupicef.set
                     (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                  (cupicef.univ
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                     (cupicef.axiom
                        (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                     cupicef.I)
                  cupicef.I comparison)
               Lt Eq))) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= c : cupicef.Term cupicef.set comparison =>
   c_27_ : cupicef.Term cupicef.set comparison =>
   H :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.not
          (Coq__Init__Logic.not
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                Lt Eq))) =>
   H
     (cupicef.cast (cupicef.rule cupicef.prop cupicef.prop) cupicef.prop
        (cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Lt Eq)
           (H0 :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.eq
                   (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      (cupicef.univ cupicef.set
                         (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                      (cupicef.univ
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         cupicef.I)
                      cupicef.I comparison)
                   Lt Eq) =>
            Coq__Init__Logic.False))
        (Coq__Init__Logic.not
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Lt Eq))
        cupicef.I
        (H0 :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                Lt Eq) =>
         Coq__Init__Logic.False__ind Coq__Init__Logic.False
           (let__H2 c c_27_ H H0))).

def let__H3 :
  c : cupicef.Term cupicef.set comparison ->
  c_27_ : cupicef.Term cupicef.set comparison ->
  H :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.not
         (Coq__Init__Logic.not
            (Coq__Init__Logic.eq
               (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                  (cupicef.axiom
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                  (cupicef.univ cupicef.set
                     (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                  (cupicef.univ
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                     (cupicef.axiom
                        (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                     cupicef.I)
                  cupicef.I comparison)
               Lt Gt))) ->
  H0 :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Lt Gt) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= c : cupicef.Term cupicef.set comparison =>
   c_27_ : cupicef.Term cupicef.set comparison =>
   H :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.not
          (Coq__Init__Logic.not
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                Lt Gt))) =>
   H0 :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          Lt Gt) =>
   Coq__Init__Logic.eq__ind
     (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
        (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
        (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           cupicef.I)
        cupicef.I comparison)
     Lt
     (e : cupicef.Term cupicef.set comparison =>
      match____comparison (cupicef.type (cupicef.s cupicef.z))
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.univ cupicef.prop (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        Coq__Init__Logic.False Coq__Init__Logic.True Coq__Init__Logic.False e)
     Coq__Init__Logic.I Gt H0.

def let__n2 :
  c : cupicef.Term cupicef.set comparison ->
  c_27_ : cupicef.Term cupicef.set comparison ->
  H :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.not
         (Coq__Init__Logic.not
            (Coq__Init__Logic.eq
               (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                  (cupicef.axiom
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                  (cupicef.univ cupicef.set
                     (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                  (cupicef.univ
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                     (cupicef.axiom
                        (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                     cupicef.I)
                  cupicef.I comparison)
               Lt Gt))) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= c : cupicef.Term cupicef.set comparison =>
   c_27_ : cupicef.Term cupicef.set comparison =>
   H :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.not
          (Coq__Init__Logic.not
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                Lt Gt))) =>
   H
     (cupicef.cast (cupicef.rule cupicef.prop cupicef.prop) cupicef.prop
        (cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Lt Gt)
           (H0 :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.eq
                   (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      (cupicef.univ cupicef.set
                         (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                      (cupicef.univ
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         cupicef.I)
                      cupicef.I comparison)
                   Lt Gt) =>
            Coq__Init__Logic.False))
        (Coq__Init__Logic.not
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Lt Gt))
        cupicef.I
        (H0 :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                Lt Gt) =>
         Coq__Init__Logic.False__ind Coq__Init__Logic.False
           (let__H3 c c_27_ H H0))).

def let__H4 :
  c : cupicef.Term cupicef.set comparison ->
  c_27_ : cupicef.Term cupicef.set comparison ->
  H :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.not
         (Coq__Init__Logic.not
            (Coq__Init__Logic.eq
               (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                  (cupicef.axiom
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                  (cupicef.univ cupicef.set
                     (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                  (cupicef.univ
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                     (cupicef.axiom
                        (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                     cupicef.I)
                  cupicef.I comparison)
               Gt Eq))) ->
  H0 :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Gt Eq) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= c : cupicef.Term cupicef.set comparison =>
   c_27_ : cupicef.Term cupicef.set comparison =>
   H :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.not
          (Coq__Init__Logic.not
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                Gt Eq))) =>
   H0 :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          Gt Eq) =>
   Coq__Init__Logic.eq__ind
     (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
        (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
        (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           cupicef.I)
        cupicef.I comparison)
     Gt
     (e : cupicef.Term cupicef.set comparison =>
      match____comparison (cupicef.type (cupicef.s cupicef.z))
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.univ cupicef.prop (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        Coq__Init__Logic.False Coq__Init__Logic.False Coq__Init__Logic.True e)
     Coq__Init__Logic.I Eq H0.

def let__n3 :
  c : cupicef.Term cupicef.set comparison ->
  c_27_ : cupicef.Term cupicef.set comparison ->
  H :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.not
         (Coq__Init__Logic.not
            (Coq__Init__Logic.eq
               (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                  (cupicef.axiom
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                  (cupicef.univ cupicef.set
                     (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                  (cupicef.univ
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                     (cupicef.axiom
                        (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                     cupicef.I)
                  cupicef.I comparison)
               Gt Eq))) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= c : cupicef.Term cupicef.set comparison =>
   c_27_ : cupicef.Term cupicef.set comparison =>
   H :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.not
          (Coq__Init__Logic.not
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                Gt Eq))) =>
   H
     (cupicef.cast (cupicef.rule cupicef.prop cupicef.prop) cupicef.prop
        (cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Gt Eq)
           (H0 :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.eq
                   (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      (cupicef.univ cupicef.set
                         (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                      (cupicef.univ
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         cupicef.I)
                      cupicef.I comparison)
                   Gt Eq) =>
            Coq__Init__Logic.False))
        (Coq__Init__Logic.not
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Gt Eq))
        cupicef.I
        (H0 :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                Gt Eq) =>
         Coq__Init__Logic.False__ind Coq__Init__Logic.False
           (let__H4 c c_27_ H H0))).

def let__H5 :
  c : cupicef.Term cupicef.set comparison ->
  c_27_ : cupicef.Term cupicef.set comparison ->
  H :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.not
         (Coq__Init__Logic.not
            (Coq__Init__Logic.eq
               (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                  (cupicef.axiom
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                  (cupicef.univ cupicef.set
                     (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                  (cupicef.univ
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                     (cupicef.axiom
                        (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                     cupicef.I)
                  cupicef.I comparison)
               Gt Lt))) ->
  H0 :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Gt Lt) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= c : cupicef.Term cupicef.set comparison =>
   c_27_ : cupicef.Term cupicef.set comparison =>
   H :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.not
          (Coq__Init__Logic.not
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                Gt Lt))) =>
   H0 :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          Gt Lt) =>
   Coq__Init__Logic.eq__ind
     (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
        (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
        (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           cupicef.I)
        cupicef.I comparison)
     Gt
     (e : cupicef.Term cupicef.set comparison =>
      match____comparison (cupicef.type (cupicef.s cupicef.z))
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.univ cupicef.prop (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        Coq__Init__Logic.False Coq__Init__Logic.False Coq__Init__Logic.True e)
     Coq__Init__Logic.I Lt H0.

def let__n4 :
  c : cupicef.Term cupicef.set comparison ->
  c_27_ : cupicef.Term cupicef.set comparison ->
  H :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.not
         (Coq__Init__Logic.not
            (Coq__Init__Logic.eq
               (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                  (cupicef.axiom
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                  (cupicef.univ cupicef.set
                     (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                  (cupicef.univ
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                     (cupicef.axiom
                        (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                     cupicef.I)
                  cupicef.I comparison)
               Gt Lt))) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= c : cupicef.Term cupicef.set comparison =>
   c_27_ : cupicef.Term cupicef.set comparison =>
   H :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.not
          (Coq__Init__Logic.not
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                Gt Lt))) =>
   H
     (cupicef.cast (cupicef.rule cupicef.prop cupicef.prop) cupicef.prop
        (cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Gt Lt)
           (H0 :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.eq
                   (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      (cupicef.univ cupicef.set
                         (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                      (cupicef.univ
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         cupicef.I)
                      cupicef.I comparison)
                   Gt Lt) =>
            Coq__Init__Logic.False))
        (Coq__Init__Logic.not
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Gt Lt))
        cupicef.I
        (H0 :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                Gt Lt) =>
         Coq__Init__Logic.False__ind Coq__Init__Logic.False
           (let__H5 c c_27_ H H0))).

thm comparison__eq__stable :
  c : cupicef.Term cupicef.set comparison ->
  c_27_ : cupicef.Term cupicef.set comparison ->
  __ :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.not
         (Coq__Init__Logic.not
            (Coq__Init__Logic.eq
               (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                  (cupicef.axiom
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                  (cupicef.univ cupicef.set
                     (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                  (cupicef.univ
                     (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                     (cupicef.axiom
                        (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                     cupicef.I)
                  cupicef.I comparison)
               c c_27_))) ->
  cupicef.Term cupicef.prop
    (Coq__Init__Logic.eq
       (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
          (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
          (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
             cupicef.I)
          (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             cupicef.I)
          cupicef.I comparison)
       c c_27_)

:= c : cupicef.Term cupicef.set comparison =>
   match____comparison cupicef.prop
     (c0 : cupicef.Term cupicef.set comparison =>
      cupicef.prod cupicef.set (cupicef.rule cupicef.prop cupicef.prop)
        (cupicef.rule cupicef.set (cupicef.rule cupicef.prop cupicef.prop))
        cupicef.I comparison
        (c_27_ : cupicef.Term cupicef.set comparison =>
         cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.not
              (Coq__Init__Logic.not
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I comparison)
                    c0 c_27_)))
           (__ :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.not
                   (Coq__Init__Logic.not
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I comparison)
                         c0 c_27_))) =>
            Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              c0 c_27_)))
     (c_27_ : cupicef.Term cupicef.set comparison =>
      match____comparison cupicef.prop
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.not
              (Coq__Init__Logic.not
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I comparison)
                    Eq c0)))
           (__ :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.not
                   (Coq__Init__Logic.not
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I comparison)
                         Eq c0))) =>
            Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Eq c0))
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.not
                (Coq__Init__Logic.not
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I comparison)
                      Eq Eq))) =>
         Coq__Init__Logic.eq__refl
           (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                 cupicef.I)
              (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 cupicef.I)
              cupicef.I comparison)
           Eq)
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.not
                (Coq__Init__Logic.not
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I comparison)
                      Eq Lt))) =>
         Coq__Init__Logic.match____False cupicef.prop
           (__ : cupicef.Term cupicef.prop Coq__Init__Logic.False =>
            Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Eq Lt)
           (let__n c c_27_ H))
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.not
                (Coq__Init__Logic.not
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I comparison)
                      Eq Gt))) =>
         Coq__Init__Logic.match____False cupicef.prop
           (__ : cupicef.Term cupicef.prop Coq__Init__Logic.False =>
            Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Eq Gt)
           (let__n0 c c_27_ H))
        c_27_)
     (c_27_ : cupicef.Term cupicef.set comparison =>
      match____comparison cupicef.prop
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.not
              (Coq__Init__Logic.not
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I comparison)
                    Lt c0)))
           (__ :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.not
                   (Coq__Init__Logic.not
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I comparison)
                         Lt c0))) =>
            Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Lt c0))
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.not
                (Coq__Init__Logic.not
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I comparison)
                      Lt Eq))) =>
         Coq__Init__Logic.match____False cupicef.prop
           (__ : cupicef.Term cupicef.prop Coq__Init__Logic.False =>
            Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Lt Eq)
           (let__n1 c c_27_ H))
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.not
                (Coq__Init__Logic.not
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I comparison)
                      Lt Lt))) =>
         Coq__Init__Logic.eq__refl
           (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                 cupicef.I)
              (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 cupicef.I)
              cupicef.I comparison)
           Lt)
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.not
                (Coq__Init__Logic.not
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I comparison)
                      Lt Gt))) =>
         Coq__Init__Logic.match____False cupicef.prop
           (__ : cupicef.Term cupicef.prop Coq__Init__Logic.False =>
            Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Lt Gt)
           (let__n2 c c_27_ H))
        c_27_)
     (c_27_ : cupicef.Term cupicef.set comparison =>
      match____comparison cupicef.prop
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.not
              (Coq__Init__Logic.not
                 (Coq__Init__Logic.eq
                    (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.axiom
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                       (cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                       (cupicef.univ
                          (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                          (cupicef.axiom
                             (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                          cupicef.I)
                       cupicef.I comparison)
                    Gt c0)))
           (__ :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.not
                   (Coq__Init__Logic.not
                      (Coq__Init__Logic.eq
                         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            (cupicef.univ cupicef.set
                               (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                            (cupicef.univ
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z)))
                               (cupicef.axiom
                                  (cupicef.type
                                     (cupicef.s (cupicef.s cupicef.z))))
                               cupicef.I)
                            cupicef.I comparison)
                         Gt c0))) =>
            Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Gt c0))
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.not
                (Coq__Init__Logic.not
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I comparison)
                      Gt Eq))) =>
         Coq__Init__Logic.match____False cupicef.prop
           (__ : cupicef.Term cupicef.prop Coq__Init__Logic.False =>
            Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Gt Eq)
           (let__n3 c c_27_ H))
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.not
                (Coq__Init__Logic.not
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I comparison)
                      Gt Lt))) =>
         Coq__Init__Logic.match____False cupicef.prop
           (__ : cupicef.Term cupicef.prop Coq__Init__Logic.False =>
            Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Gt Lt)
           (let__n4 c c_27_ H))
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.not
                (Coq__Init__Logic.not
                   (Coq__Init__Logic.eq
                      (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         (cupicef.univ cupicef.set
                            (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                         (cupicef.univ
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                            (cupicef.axiom
                               (cupicef.type
                                  (cupicef.s (cupicef.s cupicef.z))))
                            cupicef.I)
                         cupicef.I comparison)
                      Gt Gt))) =>
         Coq__Init__Logic.eq__refl
           (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                 cupicef.I)
              (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 cupicef.I)
              cupicef.I comparison)
           Gt)
        c_27_)
     c.

def CompOpp :
  r : cupicef.Term cupicef.set comparison ->
  cupicef.Term cupicef.set comparison

:= r : cupicef.Term cupicef.set comparison =>
   match____comparison cupicef.set
     (r0 : cupicef.Term cupicef.set comparison => comparison) Eq Gt Lt r.

thm CompOpp__involutive :
  c : cupicef.Term cupicef.set comparison ->
  cupicef.Term cupicef.prop
    (Coq__Init__Logic.eq
       (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
          (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
          (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
             cupicef.I)
          (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             cupicef.I)
          cupicef.I comparison)
       (CompOpp (CompOpp c)) c)

:= c : cupicef.Term cupicef.set comparison =>
   match____comparison cupicef.prop
     (c0 : cupicef.Term cupicef.set comparison =>
      Coq__Init__Logic.eq
        (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
              cupicef.I)
           (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              cupicef.I)
           cupicef.I comparison)
        (CompOpp (CompOpp c0)) c0)
     (Coq__Init__Logic.eq__refl
        (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
              cupicef.I)
           (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              cupicef.I)
           cupicef.I comparison)
        Eq)
     (Coq__Init__Logic.eq__refl
        (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
              cupicef.I)
           (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              cupicef.I)
           cupicef.I comparison)
        Lt)
     (Coq__Init__Logic.eq__refl
        (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
              cupicef.I)
           (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              cupicef.I)
           cupicef.I comparison)
        Gt)
     c.

def let__H6 :
  c : cupicef.Term cupicef.set comparison ->
  c_27_ : cupicef.Term cupicef.set comparison ->
  H :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         (CompOpp Eq) (CompOpp Lt)) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= c : cupicef.Term cupicef.set comparison =>
   c_27_ : cupicef.Term cupicef.set comparison =>
   H :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          (CompOpp Eq) (CompOpp Lt)) =>
   Coq__Init__Logic.eq__ind
     (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
        (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
        (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           cupicef.I)
        cupicef.I comparison)
     (CompOpp Eq)
     (e : cupicef.Term cupicef.set comparison =>
      match____comparison (cupicef.type (cupicef.s cupicef.z))
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.univ cupicef.prop (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        Coq__Init__Logic.True Coq__Init__Logic.False Coq__Init__Logic.False e)
     Coq__Init__Logic.I (CompOpp Lt) H.

def let__H7 :
  c : cupicef.Term cupicef.set comparison ->
  c_27_ : cupicef.Term cupicef.set comparison ->
  H :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         (CompOpp Eq) (CompOpp Gt)) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= c : cupicef.Term cupicef.set comparison =>
   c_27_ : cupicef.Term cupicef.set comparison =>
   H :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          (CompOpp Eq) (CompOpp Gt)) =>
   Coq__Init__Logic.eq__ind
     (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
        (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
        (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           cupicef.I)
        cupicef.I comparison)
     (CompOpp Eq)
     (e : cupicef.Term cupicef.set comparison =>
      match____comparison (cupicef.type (cupicef.s cupicef.z))
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.univ cupicef.prop (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        Coq__Init__Logic.True Coq__Init__Logic.False Coq__Init__Logic.False e)
     Coq__Init__Logic.I (CompOpp Gt) H.

def let__H8 :
  c : cupicef.Term cupicef.set comparison ->
  c_27_ : cupicef.Term cupicef.set comparison ->
  H :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         (CompOpp Lt) (CompOpp Eq)) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= c : cupicef.Term cupicef.set comparison =>
   c_27_ : cupicef.Term cupicef.set comparison =>
   H :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          (CompOpp Lt) (CompOpp Eq)) =>
   Coq__Init__Logic.eq__ind
     (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
        (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
        (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           cupicef.I)
        cupicef.I comparison)
     (CompOpp Lt)
     (e : cupicef.Term cupicef.set comparison =>
      match____comparison (cupicef.type (cupicef.s cupicef.z))
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.univ cupicef.prop (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        Coq__Init__Logic.False Coq__Init__Logic.False Coq__Init__Logic.True e)
     Coq__Init__Logic.I (CompOpp Eq) H.

def let__H9 :
  c : cupicef.Term cupicef.set comparison ->
  c_27_ : cupicef.Term cupicef.set comparison ->
  H :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         (CompOpp Gt) (CompOpp Eq)) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= c : cupicef.Term cupicef.set comparison =>
   c_27_ : cupicef.Term cupicef.set comparison =>
   H :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          (CompOpp Gt) (CompOpp Eq)) =>
   Coq__Init__Logic.eq__ind
     (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
        (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
        (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           cupicef.I)
        cupicef.I comparison)
     (CompOpp Gt)
     (e : cupicef.Term cupicef.set comparison =>
      match____comparison (cupicef.type (cupicef.s cupicef.z))
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.univ cupicef.prop (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        Coq__Init__Logic.False Coq__Init__Logic.True Coq__Init__Logic.False e)
     Coq__Init__Logic.I (CompOpp Eq) H.

thm CompOpp__inj :
  c : cupicef.Term cupicef.set comparison ->
  c_27_ : cupicef.Term cupicef.set comparison ->
  __ :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         (CompOpp c) (CompOpp c_27_)) ->
  cupicef.Term cupicef.prop
    (Coq__Init__Logic.eq
       (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
          (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
          (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
             cupicef.I)
          (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             cupicef.I)
          cupicef.I comparison)
       c c_27_)

:= c : cupicef.Term cupicef.set comparison =>
   match____comparison cupicef.prop
     (c0 : cupicef.Term cupicef.set comparison =>
      cupicef.prod cupicef.set (cupicef.rule cupicef.prop cupicef.prop)
        (cupicef.rule cupicef.set (cupicef.rule cupicef.prop cupicef.prop))
        cupicef.I comparison
        (c_27_ : cupicef.Term cupicef.set comparison =>
         cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              (CompOpp c0) (CompOpp c_27_))
           (__ :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.eq
                   (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      (cupicef.univ cupicef.set
                         (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                      (cupicef.univ
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         cupicef.I)
                      cupicef.I comparison)
                   (CompOpp c0) (CompOpp c_27_)) =>
            Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              c0 c_27_)))
     (c_27_ : cupicef.Term cupicef.set comparison =>
      match____comparison cupicef.prop
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              (CompOpp Eq) (CompOpp c0))
           (__ :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.eq
                   (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      (cupicef.univ cupicef.set
                         (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                      (cupicef.univ
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         cupicef.I)
                      cupicef.I comparison)
                   (CompOpp Eq) (CompOpp c0)) =>
            Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Eq c0))
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                (CompOpp Eq) (CompOpp Eq)) =>
         H)
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                (CompOpp Eq) (CompOpp Lt)) =>
         Coq__Init__Logic.False__ind
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Eq Lt)
           (let__H6 c c_27_ H))
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                (CompOpp Eq) (CompOpp Gt)) =>
         Coq__Init__Logic.False__ind
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Eq Gt)
           (let__H7 c c_27_ H))
        c_27_)
     (c_27_ : cupicef.Term cupicef.set comparison =>
      match____comparison cupicef.prop
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              (CompOpp Lt) (CompOpp c0))
           (__ :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.eq
                   (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      (cupicef.univ cupicef.set
                         (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                      (cupicef.univ
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         cupicef.I)
                      cupicef.I comparison)
                   (CompOpp Lt) (CompOpp c0)) =>
            Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Lt c0))
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                (CompOpp Lt) (CompOpp Eq)) =>
         Coq__Init__Logic.False__ind
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Lt Eq)
           (let__H8 c c_27_ H))
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                (CompOpp Lt) (CompOpp Lt)) =>
         Coq__Init__Logic.eq__refl
           (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                 cupicef.I)
              (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 cupicef.I)
              cupicef.I comparison)
           Lt)
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                (CompOpp Lt) (CompOpp Gt)) =>
         Coq__Init__Logic.eq__sym
           (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                 cupicef.I)
              (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 cupicef.I)
              cupicef.I comparison)
           Gt Lt H)
        c_27_)
     (c_27_ : cupicef.Term cupicef.set comparison =>
      match____comparison cupicef.prop
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.prod cupicef.prop cupicef.prop
           (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              (CompOpp Gt) (CompOpp c0))
           (__ :
              cupicef.Term cupicef.prop
                (Coq__Init__Logic.eq
                   (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      (cupicef.univ cupicef.set
                         (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                      (cupicef.univ
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                         (cupicef.axiom
                            (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                         cupicef.I)
                      cupicef.I comparison)
                   (CompOpp Gt) (CompOpp c0)) =>
            Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Gt c0))
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                (CompOpp Gt) (CompOpp Eq)) =>
         Coq__Init__Logic.False__ind
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Gt Eq)
           (let__H9 c c_27_ H))
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                (CompOpp Gt) (CompOpp Lt)) =>
         Coq__Init__Logic.eq__sym
           (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                 cupicef.I)
              (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 cupicef.I)
              cupicef.I comparison)
           Lt Gt H)
        (H :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                (CompOpp Gt) (CompOpp Gt)) =>
         Coq__Init__Logic.eq__refl
           (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                 cupicef.I)
              (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 cupicef.I)
              cupicef.I comparison)
           Gt)
        c_27_)
     c.

thm CompOpp__iff :
  c : cupicef.Term cupicef.set comparison ->
  c_27_ : cupicef.Term cupicef.set comparison ->
  cupicef.Term cupicef.prop
    (Coq__Init__Logic.iff
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          (CompOpp c) c_27_)
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          c (CompOpp c_27_)))

:= c : cupicef.Term cupicef.set comparison =>
   c_27_ : cupicef.Term cupicef.set comparison =>
   Coq__Init__Logic.conj
     (cupicef.prod cupicef.prop cupicef.prop
        (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
        (Coq__Init__Logic.eq
           (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                 cupicef.I)
              (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 cupicef.I)
              cupicef.I comparison)
           (CompOpp c) c_27_)
        (__ :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                (CompOpp c) c_27_) =>
         Coq__Init__Logic.eq
           (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                 cupicef.I)
              (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 cupicef.I)
              cupicef.I comparison)
           c (CompOpp c_27_)))
     (cupicef.prod cupicef.prop cupicef.prop
        (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
        (Coq__Init__Logic.eq
           (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                 cupicef.I)
              (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 cupicef.I)
              cupicef.I comparison)
           c (CompOpp c_27_))
        (__ :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                c (CompOpp c_27_)) =>
         Coq__Init__Logic.eq
           (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                 cupicef.I)
              (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 cupicef.I)
              cupicef.I comparison)
           (CompOpp c) c_27_))
     (H :
        cupicef.Term cupicef.prop
          (Coq__Init__Logic.eq
             (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                (cupicef.univ cupicef.set
                   (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                (cupicef.univ
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   cupicef.I)
                cupicef.I comparison)
             (CompOpp c) c_27_) =>
      CompOpp__inj c (CompOpp c_27_)
        (Coq__Init__Logic.eq__ind__r
           (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
              (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                 cupicef.I)
              (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                 cupicef.I)
              cupicef.I comparison)
           c_27_
           (c0 : cupicef.Term cupicef.set comparison =>
            Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              (CompOpp c) c0)
           H (CompOpp (CompOpp c_27_)) (CompOpp__involutive c_27_)))
     (H :
        cupicef.Term cupicef.prop
          (Coq__Init__Logic.eq
             (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                (cupicef.univ cupicef.set
                   (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                (cupicef.univ
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   cupicef.I)
                cupicef.I comparison)
             c (CompOpp c_27_)) =>
      CompOpp__inj (CompOpp c) c_27_
        (Coq__Init__Logic.eq__ind__r
           (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
              (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                 cupicef.I)
              (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                 cupicef.I)
              cupicef.I comparison)
           c
           (c0 : cupicef.Term cupicef.set comparison =>
            Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              c0 (CompOpp c_27_))
           H (CompOpp (CompOpp c)) (CompOpp__involutive c))).

def CompareSpec :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  __ : cupicef.Term cupicef.set comparison ->
  cupicef.Univ cupicef.prop.

def CompEq :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  __ : cupicef.Term cupicef.prop Peq ->
  cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Eq).

def CompLt :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  __ : cupicef.Term cupicef.prop Plt ->
  cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Lt).

def CompGt :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  __ : cupicef.Term cupicef.prop Pgt ->
  cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Gt).

[ ] cupicef.code_guarded? _ (CompEq _ _ _ _) --> cupicef.guarded.

[ ] cupicef.code_guarded? _ (CompLt _ _ _ _) --> cupicef.guarded.

[ ] cupicef.code_guarded? _ (CompGt _ _ _ _) --> cupicef.guarded.

def match____CompareSpec :
  s : cupicef.Sort ->
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  P :
    (__ : cupicef.Term cupicef.set comparison ->
     cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt __) ->
     cupicef.Univ s) ->
  case__CompEq :
    (__ : cupicef.Term cupicef.prop Peq ->
     cupicef.Term s (P Eq (CompEq Peq Plt Pgt __))) ->
  case__CompLt :
    (__ : cupicef.Term cupicef.prop Plt ->
     cupicef.Term s (P Lt (CompLt Peq Plt Pgt __))) ->
  case__CompGt :
    (__ : cupicef.Term cupicef.prop Pgt ->
     cupicef.Term s (P Gt (CompGt Peq Plt Pgt __))) ->
  __ : cupicef.Term cupicef.set comparison ->
  x : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt __) ->
  cupicef.Term s (P __ x).

[ s, Peq, Plt, Pgt, P, case__CompEq, case__CompLt, case__CompGt, __]
  match____CompareSpec s Peq Plt Pgt P case__CompEq case__CompLt case__CompGt
    {Eq} (CompEq Peq Plt Pgt __)
  -->
  case__CompEq __.

[ s, Peq, Plt, Pgt, P, case__CompEq, case__CompLt, case__CompGt, __]
  match____CompareSpec s Peq Plt Pgt P case__CompEq case__CompLt case__CompGt
    {Lt} (CompLt Peq Plt Pgt __)
  -->
  case__CompLt __.

[ s, Peq, Plt, Pgt, P, case__CompEq, case__CompLt, case__CompGt, __]
  match____CompareSpec s Peq Plt Pgt P case__CompEq case__CompLt case__CompGt
    {Gt} (CompGt Peq Plt Pgt __)
  -->
  case__CompGt __.

[ s, Peq, Plt, Pgt, P, s']
  match____CompareSpec s Peq Plt Pgt
    (__ => x => cupicef.uncode _ (cupicef.code (cupicef.cU s') (P __ x)))
  -->
  match____CompareSpec s' Peq Plt Pgt (__ => x => P __ x).

def CompareSpec__ind :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  P : (__ : cupicef.Term cupicef.set comparison -> cupicef.Univ cupicef.prop) ->
  f :
    (__ : cupicef.Term cupicef.prop Peq -> cupicef.Term cupicef.prop (P Eq)) ->
  f0 :
    (__ : cupicef.Term cupicef.prop Plt -> cupicef.Term cupicef.prop (P Lt)) ->
  f1 :
    (__ : cupicef.Term cupicef.prop Pgt -> cupicef.Term cupicef.prop (P Gt)) ->
  c : cupicef.Term cupicef.set comparison ->
  c0 : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt c) ->
  cupicef.Term cupicef.prop (P c)

:= Peq : cupicef.Univ cupicef.prop =>
   Plt : cupicef.Univ cupicef.prop =>
   Pgt : cupicef.Univ cupicef.prop =>
   P :
     (__ : cupicef.Term cupicef.set comparison -> cupicef.Univ cupicef.prop) =>
   f :
     (__ : cupicef.Term cupicef.prop Peq -> cupicef.Term cupicef.prop (P Eq)) =>
   f0 :
     (__ : cupicef.Term cupicef.prop Plt -> cupicef.Term cupicef.prop (P Lt)) =>
   f1 :
     (__ : cupicef.Term cupicef.prop Pgt -> cupicef.Term cupicef.prop (P Gt)) =>
   c : cupicef.Term cupicef.set comparison =>
   c0 : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt c) =>
   match____CompareSpec cupicef.prop Peq Plt Pgt
     (c1 : cupicef.Term cupicef.set comparison =>
      __ : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt c1) =>
      P c1)
     f f0 f1 c c0.

def CompareSpecT :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  __ : cupicef.Term cupicef.set comparison ->
  cupicef.Univ cupicef.set.

def CompEqT :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  __ : cupicef.Term cupicef.prop Peq ->
  cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt Eq).

def CompLtT :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  __ : cupicef.Term cupicef.prop Plt ->
  cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt Lt).

def CompGtT :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  __ : cupicef.Term cupicef.prop Pgt ->
  cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt Gt).

[ ] cupicef.code_guarded? _ (CompEqT _ _ _ _) --> cupicef.guarded.

[ ] cupicef.code_guarded? _ (CompLtT _ _ _ _) --> cupicef.guarded.

[ ] cupicef.code_guarded? _ (CompGtT _ _ _ _) --> cupicef.guarded.

def match____CompareSpecT :
  s : cupicef.Sort ->
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  P :
    (__ : cupicef.Term cupicef.set comparison ->
     cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt __) ->
     cupicef.Univ s) ->
  case__CompEqT :
    (__ : cupicef.Term cupicef.prop Peq ->
     cupicef.Term s (P Eq (CompEqT Peq Plt Pgt __))) ->
  case__CompLtT :
    (__ : cupicef.Term cupicef.prop Plt ->
     cupicef.Term s (P Lt (CompLtT Peq Plt Pgt __))) ->
  case__CompGtT :
    (__ : cupicef.Term cupicef.prop Pgt ->
     cupicef.Term s (P Gt (CompGtT Peq Plt Pgt __))) ->
  __ : cupicef.Term cupicef.set comparison ->
  x : cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt __) ->
  cupicef.Term s (P __ x).

[ s, Peq, Plt, Pgt, P, case__CompEqT, case__CompLtT, case__CompGtT, __]
  match____CompareSpecT s Peq Plt Pgt P case__CompEqT case__CompLtT
    case__CompGtT {Eq} (CompEqT Peq Plt Pgt __)
  -->
  case__CompEqT __.

[ s, Peq, Plt, Pgt, P, case__CompEqT, case__CompLtT, case__CompGtT, __]
  match____CompareSpecT s Peq Plt Pgt P case__CompEqT case__CompLtT
    case__CompGtT {Lt} (CompLtT Peq Plt Pgt __)
  -->
  case__CompLtT __.

[ s, Peq, Plt, Pgt, P, case__CompEqT, case__CompLtT, case__CompGtT, __]
  match____CompareSpecT s Peq Plt Pgt P case__CompEqT case__CompLtT
    case__CompGtT {Gt} (CompGtT Peq Plt Pgt __)
  -->
  case__CompGtT __.

[ s, Peq, Plt, Pgt, P, s']
  match____CompareSpecT s Peq Plt Pgt
    (__ => x => cupicef.uncode _ (cupicef.code (cupicef.cU s') (P __ x)))
  -->
  match____CompareSpecT s' Peq Plt Pgt (__ => x => P __ x).

def CompareSpecT__rect :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  P :
    (c : cupicef.Term cupicef.set comparison ->
     c0 : cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt c) ->
     cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) ->
  f :
    (p : cupicef.Term cupicef.prop Peq ->
     cupicef.Term (cupicef.type (cupicef.s cupicef.z))
       (P Eq (CompEqT Peq Plt Pgt p))) ->
  f0 :
    (p : cupicef.Term cupicef.prop Plt ->
     cupicef.Term (cupicef.type (cupicef.s cupicef.z))
       (P Lt (CompLtT Peq Plt Pgt p))) ->
  f1 :
    (p : cupicef.Term cupicef.prop Pgt ->
     cupicef.Term (cupicef.type (cupicef.s cupicef.z))
       (P Gt (CompGtT Peq Plt Pgt p))) ->
  c : cupicef.Term cupicef.set comparison ->
  c0 : cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt c) ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P c c0)

:= Peq : cupicef.Univ cupicef.prop =>
   Plt : cupicef.Univ cupicef.prop =>
   Pgt : cupicef.Univ cupicef.prop =>
   P :
     (c : cupicef.Term cupicef.set comparison ->
      c0 : cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt c) ->
      cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) =>
   f :
     (p : cupicef.Term cupicef.prop Peq ->
      cupicef.Term (cupicef.type (cupicef.s cupicef.z))
        (P Eq (CompEqT Peq Plt Pgt p))) =>
   f0 :
     (p : cupicef.Term cupicef.prop Plt ->
      cupicef.Term (cupicef.type (cupicef.s cupicef.z))
        (P Lt (CompLtT Peq Plt Pgt p))) =>
   f1 :
     (p : cupicef.Term cupicef.prop Pgt ->
      cupicef.Term (cupicef.type (cupicef.s cupicef.z))
        (P Gt (CompGtT Peq Plt Pgt p))) =>
   c : cupicef.Term cupicef.set comparison =>
   c0 : cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt c) =>
   match____CompareSpecT (cupicef.type (cupicef.s cupicef.z)) Peq Plt Pgt
     (c1 : cupicef.Term cupicef.set comparison =>
      c2 : cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt c1) =>
      P c1 c2)
     f f0 f1 c c0.

def CompareSpecT__ind :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  P :
    (c : cupicef.Term cupicef.set comparison ->
     c0 : cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt c) ->
     cupicef.Univ cupicef.prop) ->
  f :
    (p : cupicef.Term cupicef.prop Peq ->
     cupicef.Term cupicef.prop (P Eq (CompEqT Peq Plt Pgt p))) ->
  f0 :
    (p : cupicef.Term cupicef.prop Plt ->
     cupicef.Term cupicef.prop (P Lt (CompLtT Peq Plt Pgt p))) ->
  f1 :
    (p : cupicef.Term cupicef.prop Pgt ->
     cupicef.Term cupicef.prop (P Gt (CompGtT Peq Plt Pgt p))) ->
  c : cupicef.Term cupicef.set comparison ->
  c0 : cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt c) ->
  cupicef.Term cupicef.prop (P c c0)

:= Peq : cupicef.Univ cupicef.prop =>
   Plt : cupicef.Univ cupicef.prop =>
   Pgt : cupicef.Univ cupicef.prop =>
   P :
     (c : cupicef.Term cupicef.set comparison ->
      c0 : cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt c) ->
      cupicef.Univ cupicef.prop) =>
   f :
     (p : cupicef.Term cupicef.prop Peq ->
      cupicef.Term cupicef.prop (P Eq (CompEqT Peq Plt Pgt p))) =>
   f0 :
     (p : cupicef.Term cupicef.prop Plt ->
      cupicef.Term cupicef.prop (P Lt (CompLtT Peq Plt Pgt p))) =>
   f1 :
     (p : cupicef.Term cupicef.prop Pgt ->
      cupicef.Term cupicef.prop (P Gt (CompGtT Peq Plt Pgt p))) =>
   c : cupicef.Term cupicef.set comparison =>
   c0 : cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt c) =>
   match____CompareSpecT cupicef.prop Peq Plt Pgt
     (c1 : cupicef.Term cupicef.set comparison =>
      c2 : cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt c1) =>
      P c1 c2)
     f f0 f1 c c0.

def CompareSpecT__rec :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  P :
    (c : cupicef.Term cupicef.set comparison ->
     c0 : cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt c) ->
     cupicef.Univ cupicef.set) ->
  f :
    (p : cupicef.Term cupicef.prop Peq ->
     cupicef.Term cupicef.set (P Eq (CompEqT Peq Plt Pgt p))) ->
  f0 :
    (p : cupicef.Term cupicef.prop Plt ->
     cupicef.Term cupicef.set (P Lt (CompLtT Peq Plt Pgt p))) ->
  f1 :
    (p : cupicef.Term cupicef.prop Pgt ->
     cupicef.Term cupicef.set (P Gt (CompGtT Peq Plt Pgt p))) ->
  c : cupicef.Term cupicef.set comparison ->
  c0 : cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt c) ->
  cupicef.Term cupicef.set (P c c0)

:= Peq : cupicef.Univ cupicef.prop =>
   Plt : cupicef.Univ cupicef.prop =>
   Pgt : cupicef.Univ cupicef.prop =>
   P :
     (c : cupicef.Term cupicef.set comparison ->
      c0 : cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt c) ->
      cupicef.Univ cupicef.set) =>
   CompareSpecT__rect Peq Plt Pgt
     (cupicef.cast
        (cupicef.rule cupicef.set
           (cupicef.rule cupicef.set (cupicef.type (cupicef.s cupicef.z))))
        (cupicef.rule cupicef.set
           (cupicef.rule cupicef.set
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))))
        (cupicef.prod cupicef.set
           (cupicef.rule cupicef.set (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.rule cupicef.set
              (cupicef.rule cupicef.set (cupicef.type (cupicef.s cupicef.z))))
           cupicef.I comparison
           (c : cupicef.Term cupicef.set comparison =>
            cupicef.prod cupicef.set (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule cupicef.set (cupicef.type (cupicef.s cupicef.z)))
              cupicef.I (CompareSpecT Peq Plt Pgt c)
              (c0 : cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt c) =>
               cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                 cupicef.I)))
        (cupicef.prod cupicef.set
           (cupicef.rule cupicef.set
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
           (cupicef.rule cupicef.set
              (cupicef.rule cupicef.set
                 (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))))
           cupicef.I comparison
           (c : cupicef.Term cupicef.set comparison =>
            cupicef.prod cupicef.set
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
              (cupicef.rule cupicef.set
                 (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
              cupicef.I (CompareSpecT Peq Plt Pgt c)
              (c0 : cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt c) =>
               cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                 cupicef.I)))
        cupicef.I P).

def let__H11 :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  c : cupicef.Term cupicef.set comparison ->
  H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Eq) ->
  H0 : cupicef.Term cupicef.prop Plt ->
  H1 :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Lt Eq) ->
  H2 :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Lt Eq) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= Peq : cupicef.Univ cupicef.prop =>
   Plt : cupicef.Univ cupicef.prop =>
   Pgt : cupicef.Univ cupicef.prop =>
   c : cupicef.Term cupicef.set comparison =>
   H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Eq) =>
   H0 : cupicef.Term cupicef.prop Plt =>
   H1 :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          Lt Eq) =>
   H2 :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          Lt Eq) =>
   Coq__Init__Logic.eq__ind
     (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
        (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
        (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           cupicef.I)
        cupicef.I comparison)
     Lt
     (e : cupicef.Term cupicef.set comparison =>
      match____comparison (cupicef.type (cupicef.s cupicef.z))
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.univ cupicef.prop (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        Coq__Init__Logic.False Coq__Init__Logic.True Coq__Init__Logic.False e)
     Coq__Init__Logic.I Eq H2.

def let__H12 :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  c : cupicef.Term cupicef.set comparison ->
  H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Eq) ->
  H0 : cupicef.Term cupicef.prop Pgt ->
  H1 :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Gt Eq) ->
  H2 :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Gt Eq) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= Peq : cupicef.Univ cupicef.prop =>
   Plt : cupicef.Univ cupicef.prop =>
   Pgt : cupicef.Univ cupicef.prop =>
   c : cupicef.Term cupicef.set comparison =>
   H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Eq) =>
   H0 : cupicef.Term cupicef.prop Pgt =>
   H1 :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          Gt Eq) =>
   H2 :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          Gt Eq) =>
   Coq__Init__Logic.eq__ind
     (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
        (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
        (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           cupicef.I)
        cupicef.I comparison)
     Gt
     (e : cupicef.Term cupicef.set comparison =>
      match____comparison (cupicef.type (cupicef.s cupicef.z))
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.univ cupicef.prop (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        Coq__Init__Logic.False Coq__Init__Logic.False Coq__Init__Logic.True e)
     Coq__Init__Logic.I Eq H2.

def let__H10 :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  c : cupicef.Term cupicef.set comparison ->
  H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Eq) ->
  __ :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Eq Eq) ->
  cupicef.Term cupicef.prop Peq

:= Peq : cupicef.Univ cupicef.prop =>
   Plt : cupicef.Univ cupicef.prop =>
   Pgt : cupicef.Univ cupicef.prop =>
   c : cupicef.Term cupicef.set comparison =>
   H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Eq) =>
   match____CompareSpec cupicef.prop Peq Plt Pgt
     (c0 : cupicef.Term cupicef.set comparison =>
      __ : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt c0) =>
      cupicef.prod cupicef.prop cupicef.prop
        (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
        (Coq__Init__Logic.eq
           (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                 cupicef.I)
              (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 cupicef.I)
              cupicef.I comparison)
           c0 Eq)
        (__0 :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                c0 Eq) =>
         Peq))
     (H0 : cupicef.Term cupicef.prop Peq =>
      H1 :
        cupicef.Term cupicef.prop
          (Coq__Init__Logic.eq
             (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                (cupicef.univ cupicef.set
                   (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                (cupicef.univ
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   cupicef.I)
                cupicef.I comparison)
             Eq Eq) =>
      (H2 :
         cupicef.Term cupicef.prop
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Eq Eq) =>
       H3 : cupicef.Term cupicef.prop Peq =>
       H3) H1 H0)
     (H0 : cupicef.Term cupicef.prop Plt =>
      H1 :
        cupicef.Term cupicef.prop
          (Coq__Init__Logic.eq
             (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                (cupicef.univ cupicef.set
                   (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                (cupicef.univ
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   cupicef.I)
                cupicef.I comparison)
             Lt Eq) =>
      (H2 :
         cupicef.Term cupicef.prop
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Lt Eq) =>
       Coq__Init__Logic.False__ind
         (cupicef.prod cupicef.prop cupicef.prop
            (cupicef.rule cupicef.prop cupicef.prop) cupicef.I Plt
            (H3 : cupicef.Term cupicef.prop Plt => Peq))
         (let__H11 Peq Plt Pgt c H H0 H1 H2))
        H1 H0)
     (H0 : cupicef.Term cupicef.prop Pgt =>
      H1 :
        cupicef.Term cupicef.prop
          (Coq__Init__Logic.eq
             (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                (cupicef.univ cupicef.set
                   (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                (cupicef.univ
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   cupicef.I)
                cupicef.I comparison)
             Gt Eq) =>
      (H2 :
         cupicef.Term cupicef.prop
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Gt Eq) =>
       Coq__Init__Logic.False__ind
         (cupicef.prod cupicef.prop cupicef.prop
            (cupicef.rule cupicef.prop cupicef.prop) cupicef.I Pgt
            (H3 : cupicef.Term cupicef.prop Pgt => Peq))
         (let__H12 Peq Plt Pgt c H H0 H1 H2))
        H1 H0)
     Eq H.

def let__H14 :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  c : cupicef.Term cupicef.set comparison ->
  H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Lt) ->
  H0 : cupicef.Term cupicef.prop Peq ->
  H1 :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Eq Lt) ->
  H2 :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Eq Lt) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= Peq : cupicef.Univ cupicef.prop =>
   Plt : cupicef.Univ cupicef.prop =>
   Pgt : cupicef.Univ cupicef.prop =>
   c : cupicef.Term cupicef.set comparison =>
   H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Lt) =>
   H0 : cupicef.Term cupicef.prop Peq =>
   H1 :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          Eq Lt) =>
   H2 :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          Eq Lt) =>
   Coq__Init__Logic.eq__ind
     (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
        (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
        (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           cupicef.I)
        cupicef.I comparison)
     Eq
     (e : cupicef.Term cupicef.set comparison =>
      match____comparison (cupicef.type (cupicef.s cupicef.z))
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.univ cupicef.prop (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        Coq__Init__Logic.True Coq__Init__Logic.False Coq__Init__Logic.False e)
     Coq__Init__Logic.I Lt H2.

def let__H15 :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  c : cupicef.Term cupicef.set comparison ->
  H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Lt) ->
  H0 : cupicef.Term cupicef.prop Pgt ->
  H1 :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Gt Lt) ->
  H2 :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Gt Lt) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= Peq : cupicef.Univ cupicef.prop =>
   Plt : cupicef.Univ cupicef.prop =>
   Pgt : cupicef.Univ cupicef.prop =>
   c : cupicef.Term cupicef.set comparison =>
   H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Lt) =>
   H0 : cupicef.Term cupicef.prop Pgt =>
   H1 :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          Gt Lt) =>
   H2 :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          Gt Lt) =>
   Coq__Init__Logic.eq__ind
     (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
        (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
        (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           cupicef.I)
        cupicef.I comparison)
     Gt
     (e : cupicef.Term cupicef.set comparison =>
      match____comparison (cupicef.type (cupicef.s cupicef.z))
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.univ cupicef.prop (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        Coq__Init__Logic.False Coq__Init__Logic.False Coq__Init__Logic.True e)
     Coq__Init__Logic.I Lt H2.

def let__H13 :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  c : cupicef.Term cupicef.set comparison ->
  H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Lt) ->
  __ :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Lt Lt) ->
  cupicef.Term cupicef.prop Plt

:= Peq : cupicef.Univ cupicef.prop =>
   Plt : cupicef.Univ cupicef.prop =>
   Pgt : cupicef.Univ cupicef.prop =>
   c : cupicef.Term cupicef.set comparison =>
   H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Lt) =>
   match____CompareSpec cupicef.prop Peq Plt Pgt
     (c0 : cupicef.Term cupicef.set comparison =>
      __ : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt c0) =>
      cupicef.prod cupicef.prop cupicef.prop
        (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
        (Coq__Init__Logic.eq
           (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                 cupicef.I)
              (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 cupicef.I)
              cupicef.I comparison)
           c0 Lt)
        (__0 :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                c0 Lt) =>
         Plt))
     (H0 : cupicef.Term cupicef.prop Peq =>
      H1 :
        cupicef.Term cupicef.prop
          (Coq__Init__Logic.eq
             (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                (cupicef.univ cupicef.set
                   (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                (cupicef.univ
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   cupicef.I)
                cupicef.I comparison)
             Eq Lt) =>
      (H2 :
         cupicef.Term cupicef.prop
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Eq Lt) =>
       Coq__Init__Logic.False__ind
         (cupicef.prod cupicef.prop cupicef.prop
            (cupicef.rule cupicef.prop cupicef.prop) cupicef.I Peq
            (H3 : cupicef.Term cupicef.prop Peq => Plt))
         (let__H14 Peq Plt Pgt c H H0 H1 H2))
        H1 H0)
     (H0 : cupicef.Term cupicef.prop Plt =>
      H1 :
        cupicef.Term cupicef.prop
          (Coq__Init__Logic.eq
             (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                (cupicef.univ cupicef.set
                   (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                (cupicef.univ
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   cupicef.I)
                cupicef.I comparison)
             Lt Lt) =>
      (H2 :
         cupicef.Term cupicef.prop
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Lt Lt) =>
       H3 : cupicef.Term cupicef.prop Plt =>
       H3) H1 H0)
     (H0 : cupicef.Term cupicef.prop Pgt =>
      H1 :
        cupicef.Term cupicef.prop
          (Coq__Init__Logic.eq
             (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                (cupicef.univ cupicef.set
                   (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                (cupicef.univ
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   cupicef.I)
                cupicef.I comparison)
             Gt Lt) =>
      (H2 :
         cupicef.Term cupicef.prop
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Gt Lt) =>
       Coq__Init__Logic.False__ind
         (cupicef.prod cupicef.prop cupicef.prop
            (cupicef.rule cupicef.prop cupicef.prop) cupicef.I Pgt
            (H3 : cupicef.Term cupicef.prop Pgt => Plt))
         (let__H15 Peq Plt Pgt c H H0 H1 H2))
        H1 H0)
     Lt H.

def let__H17 :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  c : cupicef.Term cupicef.set comparison ->
  H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Gt) ->
  H0 : cupicef.Term cupicef.prop Peq ->
  H1 :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Eq Gt) ->
  H2 :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Eq Gt) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= Peq : cupicef.Univ cupicef.prop =>
   Plt : cupicef.Univ cupicef.prop =>
   Pgt : cupicef.Univ cupicef.prop =>
   c : cupicef.Term cupicef.set comparison =>
   H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Gt) =>
   H0 : cupicef.Term cupicef.prop Peq =>
   H1 :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          Eq Gt) =>
   H2 :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          Eq Gt) =>
   Coq__Init__Logic.eq__ind
     (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
        (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
        (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           cupicef.I)
        cupicef.I comparison)
     Eq
     (e : cupicef.Term cupicef.set comparison =>
      match____comparison (cupicef.type (cupicef.s cupicef.z))
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.univ cupicef.prop (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        Coq__Init__Logic.True Coq__Init__Logic.False Coq__Init__Logic.False e)
     Coq__Init__Logic.I Gt H2.

def let__H18 :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  c : cupicef.Term cupicef.set comparison ->
  H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Gt) ->
  H0 : cupicef.Term cupicef.prop Plt ->
  H1 :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Lt Gt) ->
  H2 :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Lt Gt) ->
  cupicef.Term cupicef.prop Coq__Init__Logic.False

:= Peq : cupicef.Univ cupicef.prop =>
   Plt : cupicef.Univ cupicef.prop =>
   Pgt : cupicef.Univ cupicef.prop =>
   c : cupicef.Term cupicef.set comparison =>
   H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Gt) =>
   H0 : cupicef.Term cupicef.prop Plt =>
   H1 :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          Lt Gt) =>
   H2 :
     cupicef.Term cupicef.prop
       (Coq__Init__Logic.eq
          (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
             (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
             (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                cupicef.I)
             (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                cupicef.I)
             cupicef.I comparison)
          Lt Gt) =>
   Coq__Init__Logic.eq__ind
     (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
        (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
        (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
           (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
           cupicef.I)
        cupicef.I comparison)
     Lt
     (e : cupicef.Term cupicef.set comparison =>
      match____comparison (cupicef.type (cupicef.s cupicef.z))
        (c0 : cupicef.Term cupicef.set comparison =>
         cupicef.univ cupicef.prop (cupicef.type (cupicef.s cupicef.z))
           cupicef.I)
        Coq__Init__Logic.False Coq__Init__Logic.True Coq__Init__Logic.False e)
     Coq__Init__Logic.I Gt H2.

def let__H16 :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  c : cupicef.Term cupicef.set comparison ->
  H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Gt) ->
  __ :
    cupicef.Term cupicef.prop
      (Coq__Init__Logic.eq
         (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
            (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
            (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
               cupicef.I)
            (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
               (cupicef.axiom
                  (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
               cupicef.I)
            cupicef.I comparison)
         Gt Gt) ->
  cupicef.Term cupicef.prop Pgt

:= Peq : cupicef.Univ cupicef.prop =>
   Plt : cupicef.Univ cupicef.prop =>
   Pgt : cupicef.Univ cupicef.prop =>
   c : cupicef.Term cupicef.set comparison =>
   H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Gt) =>
   match____CompareSpec cupicef.prop Peq Plt Pgt
     (c0 : cupicef.Term cupicef.set comparison =>
      __ : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt c0) =>
      cupicef.prod cupicef.prop cupicef.prop
        (cupicef.rule cupicef.prop cupicef.prop) cupicef.I
        (Coq__Init__Logic.eq
           (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
              (cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                 cupicef.I)
              (cupicef.univ (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 cupicef.I)
              cupicef.I comparison)
           c0 Gt)
        (__0 :
           cupicef.Term cupicef.prop
             (Coq__Init__Logic.eq
                (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   (cupicef.univ cupicef.set
                      (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                   (cupicef.univ
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                      (cupicef.axiom
                         (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                      cupicef.I)
                   cupicef.I comparison)
                c0 Gt) =>
         Pgt))
     (H0 : cupicef.Term cupicef.prop Peq =>
      H1 :
        cupicef.Term cupicef.prop
          (Coq__Init__Logic.eq
             (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                (cupicef.univ cupicef.set
                   (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                (cupicef.univ
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   cupicef.I)
                cupicef.I comparison)
             Eq Gt) =>
      (H2 :
         cupicef.Term cupicef.prop
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Eq Gt) =>
       Coq__Init__Logic.False__ind
         (cupicef.prod cupicef.prop cupicef.prop
            (cupicef.rule cupicef.prop cupicef.prop) cupicef.I Peq
            (H3 : cupicef.Term cupicef.prop Peq => Pgt))
         (let__H17 Peq Plt Pgt c H H0 H1 H2))
        H1 H0)
     (H0 : cupicef.Term cupicef.prop Plt =>
      H1 :
        cupicef.Term cupicef.prop
          (Coq__Init__Logic.eq
             (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                (cupicef.univ cupicef.set
                   (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                (cupicef.univ
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   cupicef.I)
                cupicef.I comparison)
             Lt Gt) =>
      (H2 :
         cupicef.Term cupicef.prop
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Lt Gt) =>
       Coq__Init__Logic.False__ind
         (cupicef.prod cupicef.prop cupicef.prop
            (cupicef.rule cupicef.prop cupicef.prop) cupicef.I Plt
            (H3 : cupicef.Term cupicef.prop Plt => Pgt))
         (let__H18 Peq Plt Pgt c H H0 H1 H2))
        H1 H0)
     (H0 : cupicef.Term cupicef.prop Pgt =>
      H1 :
        cupicef.Term cupicef.prop
          (Coq__Init__Logic.eq
             (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                (cupicef.axiom
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                (cupicef.univ cupicef.set
                   (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                (cupicef.univ
                   (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                   (cupicef.axiom
                      (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                   cupicef.I)
                cupicef.I comparison)
             Gt Gt) =>
      (H2 :
         cupicef.Term cupicef.prop
           (Coq__Init__Logic.eq
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Gt Gt) =>
       H3 : cupicef.Term cupicef.prop Pgt =>
       H3) H1 H0)
     Gt H.

def CompareSpec2Type :
  Peq : cupicef.Univ cupicef.prop ->
  Plt : cupicef.Univ cupicef.prop ->
  Pgt : cupicef.Univ cupicef.prop ->
  c : cupicef.Term cupicef.set comparison ->
  __ : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt c) ->
  cupicef.Term cupicef.set (CompareSpecT Peq Plt Pgt c)

:= Peq : cupicef.Univ cupicef.prop =>
   Plt : cupicef.Univ cupicef.prop =>
   Pgt : cupicef.Univ cupicef.prop =>
   c : cupicef.Term cupicef.set comparison =>
   match____comparison cupicef.set
     (c0 : cupicef.Term cupicef.set comparison =>
      cupicef.prod cupicef.prop cupicef.set
        (cupicef.rule cupicef.prop cupicef.set) cupicef.I
        (CompareSpec Peq Plt Pgt c0)
        (__ : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt c0) =>
         CompareSpecT Peq Plt Pgt c0))
     (H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Eq) =>
      CompEqT Peq Plt Pgt
        (let__H10 Peq Plt Pgt c H
           (Coq__Init__Logic.eq__refl
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Eq)))
     (H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Lt) =>
      CompLtT Peq Plt Pgt
        (let__H13 Peq Plt Pgt c H
           (Coq__Init__Logic.eq__refl
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Lt)))
     (H : cupicef.Term cupicef.prop (CompareSpec Peq Plt Pgt Gt) =>
      CompGtT Peq Plt Pgt
        (let__H16 Peq Plt Pgt c H
           (Coq__Init__Logic.eq__refl
              (cupicef.cast (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                 (cupicef.univ cupicef.set
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)
                 (cupicef.univ
                    (cupicef.type (cupicef.s (cupicef.s cupicef.z)))
                    (cupicef.axiom
                       (cupicef.type (cupicef.s (cupicef.s cupicef.z))))
                    cupicef.I)
                 cupicef.I comparison)
              Gt)))
     c.

def CompSpec :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  eq :
    (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     cupicef.Univ cupicef.prop) ->
  lt :
    (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     cupicef.Univ cupicef.prop) ->
  x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
  y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
  __ : cupicef.Term cupicef.set comparison ->
  cupicef.Univ cupicef.prop

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   eq :
     (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      cupicef.Univ cupicef.prop) =>
   lt :
     (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      cupicef.Univ cupicef.prop) =>
   x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
   y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
   CompareSpec (eq x y) (lt x y) (lt y x).

def CompSpecT :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  eq :
    (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     cupicef.Univ cupicef.prop) ->
  lt :
    (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     cupicef.Univ cupicef.prop) ->
  x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
  y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
  __ : cupicef.Term cupicef.set comparison ->
  cupicef.Univ (cupicef.type (cupicef.s cupicef.z))

:= cupicef.cast
     (cupicef.rule (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
        (cupicef.rule
           (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z))))
           (cupicef.rule
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))))
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule cupicef.set
                       (cupicef.type (cupicef.s cupicef.z))))))))
     (cupicef.rule (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
        (cupicef.rule
           (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z))))
           (cupicef.rule
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))))
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule cupicef.set
                       (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))))))))
     (cupicef.prod (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
        (cupicef.rule
           (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z))))
           (cupicef.rule
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))))
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)))))))
        (cupicef.rule (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.rule
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))))
              (cupicef.rule
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.type (cupicef.s cupicef.z))))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.rule cupicef.set
                          (cupicef.type (cupicef.s cupicef.z))))))))
        cupicef.I
        (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))) cupicef.I)
        (A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
         cupicef.prod
           (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z))))
           (cupicef.rule
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))))
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule cupicef.set
                       (cupicef.type (cupicef.s cupicef.z))))))
           (cupicef.rule
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))))
              (cupicef.rule
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.type (cupicef.s cupicef.z))))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.rule cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)))))))
           cupicef.I
           (cupicef.prod (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z)))
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))))
              cupicef.I A
              (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
               cupicef.prod (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z)))
                 cupicef.I A
                 (__0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
                  cupicef.univ cupicef.prop
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)))
           (eq :
              (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
               __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
               cupicef.Univ cupicef.prop) =>
            cupicef.prod
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))))
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)))))
              (cupicef.rule
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.type (cupicef.s cupicef.z))))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.rule cupicef.set
                          (cupicef.type (cupicef.s cupicef.z))))))
              cupicef.I
              (cupicef.prod (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z)))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.type (cupicef.s cupicef.z))))
                 cupicef.I A
                 (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
                  cupicef.prod (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.type (cupicef.s cupicef.z)))
                    cupicef.I A
                    (__0 :
                       cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
                     cupicef.univ cupicef.prop
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)))
              (lt :
                 (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
                  __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
                  cupicef.Univ cupicef.prop) =>
               cupicef.prod (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule cupicef.set
                       (cupicef.type (cupicef.s cupicef.z))))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.rule cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)))))
                 cupicef.I A
                 (x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
                  cupicef.prod (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule cupicef.set
                       (cupicef.type (cupicef.s cupicef.z)))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.rule cupicef.set
                          (cupicef.type (cupicef.s cupicef.z))))
                    cupicef.I A
                    (y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
                     cupicef.prod cupicef.set
                       (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.rule cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)))
                       cupicef.I comparison
                       (__ : cupicef.Term cupicef.set comparison =>
                        cupicef.univ cupicef.set
                          (cupicef.type (cupicef.s cupicef.z)) cupicef.I)))))))
     (cupicef.prod (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
        (cupicef.rule
           (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z))))
           (cupicef.rule
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))))
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule cupicef.set
                       (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))))))
        (cupicef.rule (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.rule
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))))
              (cupicef.rule
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.type (cupicef.s cupicef.z))))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.rule cupicef.set
                          (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))))))))
        cupicef.I
        (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))) cupicef.I)
        (A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
         cupicef.prod
           (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z))))
           (cupicef.rule
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))))
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule cupicef.set
                       (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))))))
           (cupicef.rule
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))))
              (cupicef.rule
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.type (cupicef.s cupicef.z))))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.rule cupicef.set
                          (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))))))
           cupicef.I
           (cupicef.prod (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z)))
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))))
              cupicef.I A
              (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
               cupicef.prod (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z)))
                 cupicef.I A
                 (__0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
                  cupicef.univ cupicef.prop
                    (cupicef.type (cupicef.s cupicef.z)) cupicef.I)))
           (eq :
              (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
               __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
               cupicef.Univ cupicef.prop) =>
            cupicef.prod
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))))
              (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule cupicef.set
                       (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))))
              (cupicef.rule
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.type (cupicef.s cupicef.z))))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.rule cupicef.set
                          (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))))))
              cupicef.I
              (cupicef.prod (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z)))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.type (cupicef.s cupicef.z))))
                 cupicef.I A
                 (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
                  cupicef.prod (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.type (cupicef.s cupicef.z)))
                    cupicef.I A
                    (__0 :
                       cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
                     cupicef.univ cupicef.prop
                       (cupicef.type (cupicef.s cupicef.z)) cupicef.I)))
              (lt :
                 (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
                  __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
                  cupicef.Univ cupicef.prop) =>
               cupicef.prod (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule cupicef.set
                       (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))))
                 (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.rule cupicef.set
                          (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))))
                 cupicef.I A
                 (x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
                  cupicef.prod (cupicef.type (cupicef.s cupicef.z))
                    (cupicef.rule cupicef.set
                       (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
                    (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
                       (cupicef.rule cupicef.set
                          (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))))
                    cupicef.I A
                    (y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
                     cupicef.prod cupicef.set
                       (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                       (cupicef.rule cupicef.set
                          (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
                       cupicef.I comparison
                       (__ : cupicef.Term cupicef.set comparison =>
                        cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                          (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                          cupicef.I)))))))
     cupicef.I
     (A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
      eq :
        (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
         __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
         cupicef.Univ cupicef.prop) =>
      lt :
        (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
         __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
         cupicef.Univ cupicef.prop) =>
      x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
      y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
      CompareSpecT (eq x y) (lt x y) (lt y x)).

def CompSpec2Type :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  eq :
    (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     cupicef.Univ cupicef.prop) ->
  lt :
    (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     cupicef.Univ cupicef.prop) ->
  x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
  y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
  c : cupicef.Term cupicef.set comparison ->
  __ : cupicef.Term cupicef.prop (CompSpec A eq lt x y c) ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (CompSpecT A eq lt x y c)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   eq :
     (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      cupicef.Univ cupicef.prop) =>
   lt :
     (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      __0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      cupicef.Univ cupicef.prop) =>
   x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
   y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
   c : cupicef.Term cupicef.set comparison =>
   H : cupicef.Term cupicef.prop (CompSpec A eq lt x y c) =>
   CompareSpec2Type (eq x y) (lt x y) (lt y x) c H.

def identity :
  Coq__Init__Datatypes__80 : cupicef.Sort ->
  A : cupicef.Univ Coq__Init__Datatypes__80 ->
  a : cupicef.Term Coq__Init__Datatypes__80 A ->
  __ : cupicef.Term Coq__Init__Datatypes__80 A ->
  cupicef.Univ cupicef.prop.

identity' :
  A : cupicef.Univ cupicef.sinf ->
  a : cupicef.Term cupicef.sinf A ->
  __ : cupicef.Term cupicef.sinf A ->
  cupicef.Univ cupicef.sinf.

[ Coq__Init__Datatypes__80, A, a, __]
  cupicef.code (cupicef.cU _) (identity Coq__Init__Datatypes__80 A a __)
  -->
  identity' (cupicef.code (cupicef.cU Coq__Init__Datatypes__80) A) a __.

def Coq__Init__Datatypes__80 :
  cupicef.Nat

:= cupicef.s cupicef.z.

def identity__refl :
  A : cupicef.Univ (cupicef.type Coq__Init__Datatypes__80) ->
  a : cupicef.Term (cupicef.type Coq__Init__Datatypes__80) A ->
  cupicef.Term cupicef.prop
    (identity (cupicef.type Coq__Init__Datatypes__80) A a a).

[ ] cupicef.code_guarded? _ (identity__refl _ _) --> cupicef.guarded.

def match____identity :
  s : cupicef.Sort ->
  A : cupicef.Univ (cupicef.type Coq__Init__Datatypes__80) ->
  a : cupicef.Term (cupicef.type Coq__Init__Datatypes__80) A ->
  P :
    (__ : cupicef.Term (cupicef.type Coq__Init__Datatypes__80) A ->
     cupicef.Term cupicef.prop
       (identity (cupicef.type Coq__Init__Datatypes__80) A a __) ->
     cupicef.Univ s) ->
  case__identity__refl : cupicef.Term s (P a (identity__refl A a)) ->
  __ : cupicef.Term (cupicef.type Coq__Init__Datatypes__80) A ->
  x :
    cupicef.Term cupicef.prop
      (identity (cupicef.type Coq__Init__Datatypes__80) A a __) ->
  cupicef.Term s (P __ x).

[ s, A, a, P, case__identity__refl]
  match____identity s A a P case__identity__refl {a} (identity__refl A a)
  -->
  case__identity__refl.

[ s, A, a, P, s']
  match____identity s A a
    (__ => x => cupicef.uncode _ (cupicef.code (cupicef.cU s') (P __ x)))
  -->
  match____identity s' A a (__ => x => P __ x).

def identity__rect :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
  P :
    (a0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     i :
       cupicef.Term cupicef.prop
         (identity (cupicef.type (cupicef.s cupicef.z)) A a a0) ->
     cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) ->
  f :
    cupicef.Term (cupicef.type (cupicef.s cupicef.z))
      (P a (identity__refl A a)) ->
  y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
  i :
    cupicef.Term cupicef.prop
      (identity (cupicef.type (cupicef.s cupicef.z)) A a y) ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P y i)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
   P :
     (a0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      i :
        cupicef.Term cupicef.prop
          (identity (cupicef.type (cupicef.s cupicef.z)) A a a0) ->
      cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) =>
   f :
     cupicef.Term (cupicef.type (cupicef.s cupicef.z))
       (P a (identity__refl A a)) =>
   y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
   i :
     cupicef.Term cupicef.prop
       (identity (cupicef.type (cupicef.s cupicef.z)) A a y) =>
   match____identity (cupicef.type (cupicef.s cupicef.z)) A a
     (y0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
      i0 :
        cupicef.Term cupicef.prop
          (identity (cupicef.type (cupicef.s cupicef.z)) A a y0) =>
      P y0 i0)
     f y i.

def identity__ind :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
  P :
    (a0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     i :
       cupicef.Term cupicef.prop
         (identity (cupicef.type (cupicef.s cupicef.z)) A a a0) ->
     cupicef.Univ cupicef.prop) ->
  f : cupicef.Term cupicef.prop (P a (identity__refl A a)) ->
  y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
  i :
    cupicef.Term cupicef.prop
      (identity (cupicef.type (cupicef.s cupicef.z)) A a y) ->
  cupicef.Term cupicef.prop (P y i)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
   P :
     (a0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      i :
        cupicef.Term cupicef.prop
          (identity (cupicef.type (cupicef.s cupicef.z)) A a a0) ->
      cupicef.Univ cupicef.prop) =>
   f : cupicef.Term cupicef.prop (P a (identity__refl A a)) =>
   y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
   i :
     cupicef.Term cupicef.prop
       (identity (cupicef.type (cupicef.s cupicef.z)) A a y) =>
   match____identity cupicef.prop A a
     (y0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
      i0 :
        cupicef.Term cupicef.prop
          (identity (cupicef.type (cupicef.s cupicef.z)) A a y0) =>
      P y0 i0)
     f y i.

def identity__rec :
  A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) ->
  a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
  P :
    (a0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
     i :
       cupicef.Term cupicef.prop
         (identity (cupicef.type (cupicef.s cupicef.z)) A a a0) ->
     cupicef.Univ cupicef.set) ->
  f : cupicef.Term cupicef.set (P a (identity__refl A a)) ->
  y : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
  i :
    cupicef.Term cupicef.prop
      (identity (cupicef.type (cupicef.s cupicef.z)) A a y) ->
  cupicef.Term cupicef.set (P y i)

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   a : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
   P :
     (a0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A ->
      i :
        cupicef.Term cupicef.prop
          (identity (cupicef.type (cupicef.s cupicef.z)) A a a0) ->
      cupicef.Univ cupicef.set) =>
   identity__rect A a
     (cupicef.cast
        (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.prop (cupicef.type (cupicef.s cupicef.z))))
        (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.prop
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))))
        (cupicef.prod (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.prop (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule cupicef.prop (cupicef.type (cupicef.s cupicef.z))))
           cupicef.I A
           (a0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
            cupicef.prod cupicef.prop (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule cupicef.prop (cupicef.type (cupicef.s cupicef.z)))
              cupicef.I
              (identity (cupicef.type (cupicef.s cupicef.z)) A a a0)
              (i :
                 cupicef.Term cupicef.prop
                   (identity (cupicef.type (cupicef.s cupicef.z)) A a a0) =>
               cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
                 cupicef.I)))
        (cupicef.prod (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.prop
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
           (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
              (cupicef.rule cupicef.prop
                 (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))))
           cupicef.I A
           (a0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
            cupicef.prod cupicef.prop
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
              (cupicef.rule cupicef.prop
                 (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
              cupicef.I
              (identity (cupicef.type (cupicef.s cupicef.z)) A a a0)
              (i :
                 cupicef.Term cupicef.prop
                   (identity (cupicef.type (cupicef.s cupicef.z)) A a a0) =>
               cupicef.univ (cupicef.type (cupicef.s cupicef.z))
                 (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
                 cupicef.I)))
        cupicef.I P).

def ID :
  cupicef.Univ (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))

:= cupicef.prod (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
     (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
        (cupicef.type (cupicef.s cupicef.z)))
     (cupicef.rule (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
        (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
           (cupicef.type (cupicef.s cupicef.z))))
     cupicef.I
     (cupicef.univ (cupicef.type (cupicef.s cupicef.z))
        (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))) cupicef.I)
     (A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
      cupicef.prod (cupicef.type (cupicef.s cupicef.z))
        (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
           (cupicef.type (cupicef.s cupicef.z)))
        cupicef.I A
        (__ : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A => A)).

def id :
  cupicef.Term (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))) ID

:= A : cupicef.Univ (cupicef.type (cupicef.s cupicef.z)) =>
   x : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) A =>
   x.

def IDProp :
  cupicef.Univ cupicef.prop

:= cupicef.prod (cupicef.type (cupicef.s cupicef.z))
     (cupicef.rule cupicef.prop cupicef.prop)
     (cupicef.rule (cupicef.type (cupicef.s cupicef.z))
        (cupicef.rule cupicef.prop cupicef.prop))
     cupicef.I
     (cupicef.univ cupicef.prop (cupicef.type (cupicef.s cupicef.z))
        cupicef.I)
     (A : cupicef.Univ cupicef.prop =>
      cupicef.prod cupicef.prop cupicef.prop
        (cupicef.rule cupicef.prop cupicef.prop) cupicef.I A
        (__ : cupicef.Term cupicef.prop A => A)).

def idProp :
  cupicef.Term cupicef.prop IDProp

:= A : cupicef.Univ cupicef.prop => x : cupicef.Term cupicef.prop A => x.

(; End of translation. ;)
