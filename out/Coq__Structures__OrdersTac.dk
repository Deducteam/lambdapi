(; This file was automatically generated by Coqine. ;)
(; The encoding used was: "template_cic". ;)

def ord :
  cupicef.Univ cupicef.set.

def OEQ :
  cupicef.Term cupicef.set ord.

def OLT :
  cupicef.Term cupicef.set ord.

def OLE :
  cupicef.Term cupicef.set ord.

[ ] cupicef.code_guarded? _ OEQ --> cupicef.guarded.

[ ] cupicef.code_guarded? _ OLT --> cupicef.guarded.

[ ] cupicef.code_guarded? _ OLE --> cupicef.guarded.

def match____ord :
  s : cupicef.Sort ->
  P : (cupicef.Term cupicef.set ord -> cupicef.Univ s) ->
  case__OEQ : cupicef.Term s (P OEQ) ->
  case__OLT : cupicef.Term s (P OLT) ->
  case__OLE : cupicef.Term s (P OLE) ->
  x : cupicef.Term cupicef.set ord ->
  cupicef.Term s (P x).

[ s, P, case__OEQ, case__OLT, case__OLE]
  match____ord s P case__OEQ case__OLT case__OLE OEQ
  -->
  case__OEQ.

[ s, P, case__OEQ, case__OLT, case__OLE]
  match____ord s P case__OEQ case__OLT case__OLE OLT
  -->
  case__OLT.

[ s, P, case__OEQ, case__OLT, case__OLE]
  match____ord s P case__OEQ case__OLT case__OLE OLE
  -->
  case__OLE.

[ s, P, s']
  match____ord s (x => cupicef.uncode _ (cupicef.code (cupicef.cU s') (P x)))
  -->
  match____ord s' (x => P x).

def ord__rect :
  P :
    (o : cupicef.Term cupicef.set ord ->
     cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) ->
  f : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P OEQ) ->
  f0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P OLT) ->
  f1 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P OLE) ->
  o : cupicef.Term cupicef.set ord ->
  cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P o)

:= P :
     (o : cupicef.Term cupicef.set ord ->
      cupicef.Univ (cupicef.type (cupicef.s cupicef.z))) =>
   f : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P OEQ) =>
   f0 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P OLT) =>
   f1 : cupicef.Term (cupicef.type (cupicef.s cupicef.z)) (P OLE) =>
   o : cupicef.Term cupicef.set ord =>
   match____ord (cupicef.type (cupicef.s cupicef.z))
     (o0 : cupicef.Term cupicef.set ord => P o0) f f0 f1 o.

def ord__ind :
  P : (o : cupicef.Term cupicef.set ord -> cupicef.Univ cupicef.prop) ->
  f : cupicef.Term cupicef.prop (P OEQ) ->
  f0 : cupicef.Term cupicef.prop (P OLT) ->
  f1 : cupicef.Term cupicef.prop (P OLE) ->
  o : cupicef.Term cupicef.set ord ->
  cupicef.Term cupicef.prop (P o)

:= P : (o : cupicef.Term cupicef.set ord -> cupicef.Univ cupicef.prop) =>
   f : cupicef.Term cupicef.prop (P OEQ) =>
   f0 : cupicef.Term cupicef.prop (P OLT) =>
   f1 : cupicef.Term cupicef.prop (P OLE) =>
   o : cupicef.Term cupicef.set ord =>
   match____ord cupicef.prop (o0 : cupicef.Term cupicef.set ord => P o0) f f0
     f1 o.

def ord__rec :
  P : (o : cupicef.Term cupicef.set ord -> cupicef.Univ cupicef.set) ->
  f : cupicef.Term cupicef.set (P OEQ) ->
  f0 : cupicef.Term cupicef.set (P OLT) ->
  f1 : cupicef.Term cupicef.set (P OLE) ->
  o : cupicef.Term cupicef.set ord ->
  cupicef.Term cupicef.set (P o)

:= P : (o : cupicef.Term cupicef.set ord -> cupicef.Univ cupicef.set) =>
   ord__rect
     (cupicef.cast
        (cupicef.rule cupicef.set (cupicef.type (cupicef.s cupicef.z)))
        (cupicef.rule cupicef.set
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
        (cupicef.prod cupicef.set (cupicef.type (cupicef.s cupicef.z))
           (cupicef.rule cupicef.set (cupicef.type (cupicef.s cupicef.z)))
           cupicef.I ord
           (o : cupicef.Term cupicef.set ord =>
            cupicef.univ cupicef.set (cupicef.type (cupicef.s cupicef.z))
              cupicef.I))
        (cupicef.prod cupicef.set
           (cupicef.axiom (cupicef.type (cupicef.s cupicef.z)))
           (cupicef.rule cupicef.set
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))))
           cupicef.I ord
           (o : cupicef.Term cupicef.set ord =>
            cupicef.univ (cupicef.type (cupicef.s cupicef.z))
              (cupicef.axiom (cupicef.type (cupicef.s cupicef.z))) cupicef.I))
        cupicef.I P).

def trans__ord :
  o : cupicef.Term cupicef.set ord ->
  o_27_ : cupicef.Term cupicef.set ord ->
  cupicef.Term cupicef.set ord

:= o : cupicef.Term cupicef.set ord =>
   o_27_ : cupicef.Term cupicef.set ord =>
   match____ord cupicef.set (o0 : cupicef.Term cupicef.set ord => ord) o_27_
     (match____ord cupicef.set (o_27_0 : cupicef.Term cupicef.set ord => ord)
        o OLT OLT o_27_)
     (match____ord cupicef.set (o_27_0 : cupicef.Term cupicef.set ord => ord)
        o OLT OLE o_27_)
     o.

(; End of translation. ;)
